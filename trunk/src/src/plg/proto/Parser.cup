package src.plg.proto;

import java_cup.runtime.*;
import src.es.ucm.fdi.plg.evlib.TAtributos;

// Se crea el objeto que contiene las funciones de atribución
action code {:
   private EAtribucion atrb = new EAtribucion();
:}

// DefiniciÃ³n de los terminales del lenguaje 
terminal            String ident,letra, digito,caracter;
terminal			float numReal;
terminal            integer numeroEnt;
terminal            program, instructions,CONSTS, CONST, tipos, tipo, vars, var, subprograms,subprogram,
				    THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE, IF,
					BOOLEAN, INTEGER, NATURAL, FLOAT,
					numero, TRUE, FALSE, in, out, Call,
					RESTA,MAYOR,MENOR,MENORIGUAL,MAYORIGUAL,IGUALIGUAL,DISTINTO,SUMA,MULT,DIV,MOD,
					DESPIZQ,DESPDER,CHAR,INT,NAT,not,
					DP,SWAP1,SWAP2,PABIERTO,PCERRADO,COMILLA,
					CABIERTO,CCERRADO,LLABIERTA,LLCERRADA,COMA,ARROBA,PYC,IGUAL,GUIONBAJO;

// Definición de los no terminales del lenguaje
non terminal TAtributos Programa, Consts, Tipos, Vars,  Subprogramas, Decs, Dec,
			PFs, PF, CS, DecsSubs, DecSub, Designador, Tipo, Dimensiones, Componente,
			TiposTupla, TipoBasico, Valores, Insts, Inst, InsAsig, InsR, InsW, ExpIF, ExpWHILE, LLAMADA,
			Parametros, Parametro, ExpBool, Exp, Exp0, Exp1, Exp2, Exp3, Op0, Op1, OR, Op2, AND1, Op3,
			Op41, Op42;

// Se definen las reglas sintácticas
//===================PROGRAMA==============================
//Programa → program : ident { Consts Tipos Vars Subprogramas instructions { Insts }}
Programa ::= program DP ident:id LLABIERTA Consts:consts Tipos:tipos Vars:vars Subprogramas:subprogramas instructions LLABIERTA Insts:insts LLCERRADA LLCERRADA 
{: RESULT= atrb.Programa( id,consts,tipos,vars,subprogramas,insts); :};

//===================CONSTS==============================
//Consts → consts { Decs }; Consts → λ
Consts ::= CONSTS LLABIERTA Decs:decs LLCERRADA {: RESULT= atrb.Consts0(decs); :};
Consts ::= {: RESULT= atrb.Consts1(); :}; //VACIO

//===================TIPOS==============================
//Tipos → tipos { Decs }; Tipos → λ
Tipos ::= tipos LLABIERTA Decs:decs LLCERRADA  PYC {: RESULT= atrb.Tipos0(decs); :};
Tipos ::= {: RESULT= atrb.Tipos1(); :}; //VACIO

//===================VARS==============================
//Vars → vars { Decs }; Vars → λ
Vars ::= vars LLABIERTA Decs:decs LLCERRADA  PYC {: RESULT= atrb.Vars0(decs); :};
Vars ::= {: RESULT= atrb.Vars1(); :};  //VACIO 

//===================SUBPROGRAMAS==============================
//Subprogramas →  subprograms { Decs }; Subprogramas → Subprograma; Subprogramas → λ
Subprogramas ::= subprograms LLABIERTA Decs:decs LLCERRADA PYC {: RESULT= atrb.Subprogramas0(decs); :};
Subprogramas ::= {: RESULT= atrb.Subprogramas1(subprograma); :};

//===================DECS==============================
//Decs → Decs ; Dec; Decs → Dec
Decs ::= Decs:decs PYC Dec:dec {: RESULT= atrb.Decs0(decs,dec); :}; 
Decs ::= Dec:dec {: RESULT= atrb.Decs1(dec); :};

//===================DEC==============================
//Dec → const TipoBasico ident = Valores; Dec → tipo Tipo ident; Dec → var Tipo ident
//Dec → subprogram: ident (PFs) {CS}
Dec ::= CONST TipoBasico:tipobasico ident:id IGUAL Valores:valores {: RESULT= atrb.Dec0(tipobasico,id,Valores); :};
Dec ::= tipo Tipo:tipo ident:id {: RESULT= atrb.Dec1(tipo,id); :};
Dec ::= var Tipo:tipo ident:id {: RESULT= atrb.Dec2(tipo,id); :};
Dec ::= subprogram DP ident:id PABIERTO PFs:pfs PCERRADO LLABIERTA CS:cs LLCERRADA {: RESULT = atrb.Dec3(id,pfs,cs); :};

//===================PFS==============================
//PFs → PFs, PF | PF;
PFs ::= PFs:pfs COMA PF:pf {: RESULT= atrb.PFs0(pfs,pf); :};
PFs ::= PF:pf {: RESULT= atrb.PFs1(pf);:};

//===================PF==============================
//PF → Tipo ident | Tipo * Designador 
PF ::= Tipo:tipo ident:id {: RESULT= atrb.PF0(tipo,id); :};
PF ::= Tipo:tipo MULT Designador:desig {: RESULT= atrb.PF1(tipo,desig); :};

//===================CS==============================
//CS  → vars { DecsSubs } instructions { Insts }
CS  ::= vars LLABIERTA DecsSubs:decssubs LLCERRADA instructions LLABIERTA Insts:insts LLCERRADA {: RESULT= atrb.CS(decssubs,insts); :};

//===================DECSSUBS==============================
//DecsSubs→ DecsSubs; DecSub; DecsSubs→ DecSub; DecsSubs→ λ;
DecsSubs ::= DecsSubs:decssubs PYC DecSub:decsub {: RESULT= atrb.DecsSubs0(decssubs,decsub); :};
DecsSubs ::= DecSub:decsub {: RESULT= atrb.DecsSubs1(decsub); :};
DecsSubs ::=  {: RESULT= atrb.DecsSubs2(); :};

//===================DECSUB==============================
//DecSub → var Tipo identificador
DecSub ::= var Tipo:tipo ident:id {: RESULT= atrb.DecSub0(tipo,id); :};


//===================DESIGNADOR==============================
//designador → ident; designador → designador[Exp]; designador → designador_numero
Designador ::= ident:id {: RESULT= atrb.designador1(id); :};
Designador ::= ident:id CABIERTO Exp:exp CCERRADO {: RESULT= atrb.designador2(desig,exp); :};
Designador ::= ident:id GUIONBAJO numero {: RESULT= atrb.designador3(desig); :};

//===================TIPO==============================
//Tipo → TipoBasico; Tipo → ident; Tipo → Tipo Dimensiones;
Tipo ::= TipoBasico:tipobasico PYC {: RESULT= atrb.Tipo0(tipobasico); :};
Tipo ::= ident:id PYC {: RESULT= atrb.Tipo1(id); :};
Tipo ::= Tipo:tipo Dimensiones:dim PYC {: RESULT= atrb.Tipo2(tipo,dim); :};
Tipo ::= PABIERTO TiposTupla:tipos PCERRADO {: RESULT= atrb.Tipo3(tipos); :};

//===================DIMENSIONES==============================
//dimensiones → Dimensiones[Componente] | [Componente]
Dimensiones ::= Dimensiones:dim CABIERTO Componente:comp CCERRADO {: RESULT= atrb.Dimensiones0(dim,comp); :};
Dimensiones ::= CABIERTO Componente:comp CCERRADO {: RESULT= atrb.Dimensiones1(comp); :};

//===================COMPONENTE==============================
//componente → numero | ident;
Componente ::= numero {: RESULT= atrb.Componente0(); :};
Componente ::= ident:id {: RESULT= atrb.Componente1(id); :};

//===================TIPOTUPLA==============================
//TiposTupla → TiposTupla, Tipo; TiposTupla → Tipo
TiposTupla ::= TiposTupla:tipostupla COMA Tipo:tipo {: RESULT = atrb.TiposTupla0(tipostupla,tipo); :};
TiposTupla ::= Tipo:tipo {: RESULT = atrb.tiposTuplaR2(tipo); :};

//===================TIPOBASICO==============================
//TipoBasico → boolean | integer | natural | FLOAT | caracter
TipoBasico ::= BOOLEAN {: RESULT= atrb.TipoBasico0(); :};
TipoBasico ::= INTEGER {: RESULT= atrb.TipoBasico1(); :};
TipoBasico ::= NATURAL {: RESULT= atrb.TipoBasico2(); :};
TipoBasico ::= FLOAT {: RESULT= atrb.TipoBasico3(); :};
TipoBasico ::= caracter {: RESULT= atrb.TipoBasico4(); :};

//===================VALORES==============================
//Valores → numeroReal; Valores → numeroEnt; Valores → ’(letra)’; Valores  → ’(digito)’; Valores → true; Valores → false
Valores  ::= numeroReal:numreal {: RESULT= atrb.Valores0(numreal); :};
Valores  ::= numeroEnt  {: RESULT= atrb.Valores1();:};
Valores  ::= COMILLA PABIERTO letra PCERRADO COMILLA  {: RESULT= atrb.Valores2(); :};
Valores  ::= COMILLA PABIERTO digito PCERRADO COMILLA  {: RESULT= atrb.Valores3(); :};
Valores  ::= TRUE  {: RESULT= atrb.Valores4(); :};
Valores  ::= FALSE  {: RESULT= atrb.Valores5(); :};

//===================INSTS==============================
//Insts → Insts ; Inst; Insts → Inst
Insts ::= Insts:insts PYC Inst:inst PYC {: RESULT= atrb.Insts0(insts,inst); :};
Insts ::= Inst:inst PYC {: RESULT= atrb.Insts1(inst); :};

//===================INST==============================
//Inst → InsAsig; Inst → InsR; Inst → InsW; Inst → SWAP1(); Inst → SWAP2(); Inst → IF; Inst → WHILE; Inst → LLAMADA
Inst ::= InsAsig:insasig  {: RESULT= atrb.Inst0(insasig); :};
Inst ::= InsR:insr  {: RESULT= atrb.Inst1(insr); :};
Inst ::= InsW:insw {: RESULT= atrb.Inst2(insw); :};
Inst ::= SWAP1 PABIERTO PCERRADO {: RESULT= atrb.Inst3(); :};
Inst ::= SWAP2 PABIERTO PCERRADO {: RESULT= atrb.Inst4(); :};
Inst ::= ExpIF:if {: RESULT= atrb.Inst5(if); :};
Inst ::= ExpWHILE:while {: RESULT= atrb.Inst6(while); :};
Inst ::= LLAMADA:llamada {: RESULT= atrb.Inst7(llamada); :};

//===================INSASIG==============================
//InsAsig → Designador = Exp
InsAsig ::= Designador:desig IGUAL Exp:exp {: RESULT= atrb.InsAsig(desig,exp); :};

//===================INSR==============================
//InsR → in (Designador)
InsR ::= in PABIERTO Designador:desig PCERRADO {: RESULT= atrb.InsR(desig); :};

//===================INSW==============================
//InsW → out (Exp)
InsW ::= out PABIERTO Exp:exp PCERRADO {: RESULT= atrb.InsW(exp); :};

//===================IF================================
//IF → if ExpBool then Insts endif; IF → if  ExpBool then Insts ELSE Insts endif  
ExpIF ::= IF ExpBool:expbool THEN Insts:insts ENDIF {: RESULT= atrb.IF0(expbool,insts); :};
ExpIF ::= IF ExpBool:expbool THEN Insts:insts1 ELSE Insts:insts2 ENDIF {: RESULT= atrb.IF1(expbool,insts1,insts2); :};

//===================WHILE==============================
//WHILE → while ExpBool DO Insts endwhile
ExpWHILE ::= WHILE Exp:exp DO Insts:insts ENDWHILE {: RESULT= atrb.WHILE0(exp,insts); :};

//===================LLAMADA==============================
//LLAMADA → Call ident (Parametros)
LLAMADA ::= Call ident:id PABIERTO Parametros:parametros PCERRADO {: RESULT= atrb.LLAMADA0(id,parametros); :};

//===================PARAMETROS==============================
//Parametros → Parametros, Parametro | Parametro
Parametros ::= Parametros:parametros COMA Parametro:parametro {: RESULT= atrb.Parametros0(parametros,parametro); :};
Parametros ::= Parametro:parametro {: RESULT= atrb.Parametros1(parametro); :};

//===================PARAMETRO==============================
//Parametro → ident = Exp | designador = Exp
Parametro ::= ident:id IGUAL Exp:exp {: RESULT= atrb.Parametro0(id,exp); :};

//===================EXP==============================
//Exp → Exp0 Op0 Exp0; Exp → Exp0
Exp ::= Exp0:exp01 Op0:op0 Exp0:exp02 {: RESULT= atrb.Exp0(exp01,op0,exp02); :};
Exp ::= Exp0:exp01 {: RESULT= atrb.Exp1(exp01); :};

//===================EXP0==============================
//Exp0 → Exp0 Op1 Exp1; Exp0 → Exp0 OR Exp1; Exp0 → Exp1
Exp0 ::= Exp0:exp0 Op1:op1 Exp1:exp1 {: RESULT= atrb.Exp00(exp0,op1,exp1); :};
Exp0 ::= Exp0:exp0 OR Exp1:exp1 {: RESULT= atrb.Exp01(exp0,exp1); :};
Exp0 ::= Exp1:exp1 {: RESULT= atrb.Exp02(exp1); :};

//===================EXP1==============================
//Exp1 → Exp1 Op2 Exp2; Exp1 → Exp1 AND Exp2; Exp1 → Exp2
Exp1 ::= Exp1:exp1 Op2:op2 Exp2:exp2 {: RESULT= atrb.Exp10(exp1,op2,exp2); :};
Exp1 ::= Exp1:exp1 AND1 Exp2:exp2 {: RESULT= atrb.Exp11(exp1,exp2); :};
Exp1 ::= Exp2:exp2 {: RESULT= atrb.Exp12(exp2); :};

//===================EXP2==============================
//Exp2 → Exp3 Op3 Exp2; Exp2 → Exp3
Exp2 ::= Exp3:exp3 Op3:op3 Exp2:exp2 {: RESULT= atrb.Exp20(exp3,op3,exp2); :}; 
Exp2 ::= Exp3:exp3 {: RESULT= atrb.Exp21(exp3); :};

//===================EXP3==============================
//Exp3 → Op41 designador; Exp3 → Op42 Exp3; Exp3 → - (Exp3);Exp3 → designador | Valores; Exp3 → (Exp)
Exp3 ::= Op41:op41 Designador:desig {: RESULT= atrb.Exp30(op41,desig); :};
Exp3 ::= Op42:op42 Exp3:exp3 {: RESULT= atrb.Exp31(op42,exp3); :};
Exp3 ::= RESTA PABIERTO Exp3:exp3 PCERRADO {: RESULT= atrb.Exp32(exp3); :};
Exp3 ::= Designador:desig {: RESULT= atrb.Exp33(desig); :};
Exp3 ::= Valores:valores {: RESULT= atrb.Exp34(valores); :};
Exp3 ::= PABIERTO Exp:exp PCERRADO {: RESULT= atrb.Exp35(exp); :};

 //Op0
 Op0 ::= MENOR {: RESULT= atrb.Op00(); :};
 Op0 ::= MAYOR {: RESULT= atrb.Op01(); :};
 Op0 ::= MENORIGUAL {: RESULT= atrb.Op02(); :};
 Op0 ::= MAYORIGUAL {: RESULT= atrb.Op03(); :};
 Op0 ::= IGUALIGUAL {: RESULT= atrb.Op04(); :};
 Op0 ::= DISTINTO {: RESULT= atrb.Op05(); :};
 //Op1
 Op1 ::= SUMA {: RESULT= atrb.Op10(); :};
 Op1 ::= RESTA {: RESULT= atrb.Op11(); :};
 //Op2
 Op2 ::= MULT {: RESULT= atrb.Op20(); :}; 
 Op2 ::= DIV {: RESULT= atrb.Op21(); :};
 Op2 ::= MOD {: RESULT= atrb.Op22(); :};
//Op3
Op3 ::= DESPIZQ {: RESULT= atrb.Op30(); :};
Op3 ::= DESPDER {: RESULT= atrb.Op31(); :};
//Op41
Op41 ::= PABIERTO CHAR PCERRADO {: RESULT= atrb.Op410(); :}; 
Op41 ::= PABIERTO INT PCERRADO {: RESULT= atrb.Op411(); :};
Op41 ::= PABIERTO NAT PCERRADO {: RESULT= atrb.Op412(); :};
Op41 ::= PABIERTO FLOAT PCERRADO {: RESULT= atrb.Op413(); :};
//Op42
Op42 ::= not {: RESULT= atrb.Op420(); :};
