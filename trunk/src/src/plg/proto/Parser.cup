package src.plg.proto;

import java_cup.runtime.*;
import src.es.ucm.fdi.plg.evlib.TAtributos;

// Se crea el objeto que contiene las funciones de atribución
action code {:
   private EAtribucion atrb = new EAtribucion();
:}

parser code {:
	public void syntax_error(Symbol cur_token) {
        String possibleSymbols = "";
        int i;
        if(0 < action_table()[((Symbol)stack.peek()).parse_state].length-2) 
			possibleSymbols = getSymbol(action_table()[((Symbol)stack.peek()).parse_state][0]);
			
        for (i=2; i < action_table()[((Symbol)stack.peek()).parse_state].length-2; i += 2)
            possibleSymbols += " ," + getSymbol(action_table()[((Symbol)stack.peek()).parse_state][i]);
            
        if(cur_token.sym!=0) 
        	System.err.println("Syntax error occurs in line " + cur_token.left + ": " + possibleSymbols + " was expected");
        else 
        	System.err.println("End of file founded, " + possibleSymbols + " was expected.");
        	
        System.exit(-1);
	}
	
	public String getSymbol(int i){
    	switch(i){
        	case  3 : {return "caracter";}
        	case  4 : {return "real";}
        	case  5 : {return "natural";}
        	case  6 : {return "program";}
        	case  7 : {return "consts";}
        	case  8 : {return "const";}
        	case  9 : {return "tipos";}
        	case  10 : {return "tipo";}
        	case  11 : {return "vars";}
        	case  12 : {return "var";}
        	case  13 : {return "subprograms";}
        	case  14 : {return "subprogram";}
        	case  15 : {return "instructions";}
        	case  16 : {return "+";}
        	case  17 : {return "-";}
        	case  18 : {return "/";}
        	case  19 : {return "*";}
        	case  20 : {return "%";}
        	case  21 : {return ">";}
        	case  22 : {return "<";}
        	case  23 : {return ">=";}
        	case  24 : {return "<=";}
        	case  25 : {return "==";}
        	case  26 : {return "!=";}
        	case  27 : {return "!";}
        	case  28 : {return "and";}
        	case  29 : {return "or";}
        	case  30 : {return "<<";}
        	case  31 : {return ">>";}
        	case  32 : {return "(";}
        	case  33 : {return ")";}
        	case  34 : {return "{";}
        	case  35 : {return "}";}
        	case  36 : {return "[";}
        	case  37 : {return "]";}
        	case  38 : {return ";";}
        	case  39 : {return ":";}
        	case  40 : {return ":=";}
        	case  41 : {return "=";}
        	case  42 : {return ",";}
        	case  43 : {return "@";}
        	case  44 : {return "_";}
        	case  45 : {return "in";}
        	case  46 : {return "out";}
        	case  47 : {return "swap1";}
        	case  48 : {return "swap2";}
        	case  49 : {return "call";}
        	case  50 : {return "if";}
        	case  51 : {return "then";}
        	case  52 : {return "else";}
        	case  53 : {return "endif";}
        	case  54 : {return "while";}
        	case  55 : {return "do";}
        	case  56 : {return "endwhile";}
        	case  57 : {return "float";}
        	case  58 : {return "integer";}
        	case  59 : {return "natural";}
        	case  60 : {return "character";}
        	case  61 : {return "boolean";}
        	case  62 : {return "true";}
        	case  63 : {return "false";}
        	case  64 : {return "int";}
        	case  65 : {return "nat";}
        	case  66 : {return "char";}
            default: return "";
    	}
    }
    
:}

// DefiniciÃ³n de los terminales del lenguaje 
terminal            String ident,letra, digito,CARACTER;
terminal			Float numeroReal;
terminal            Integer numeroEnt,numeroNat,numero;
terminal            program, INSTRUCTIONS,CONSTS, CONST, TIPOS, TIPO, VARS, VAR, SUBPROGRAMS,SUBPROGRAM,
				    THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE, IF,
					BOOLEAN, INTEGER, NATURAL, FLOAT,
					 TRUE, FALSE, in, out, Call, OR, AND,
					RESTA,MAYOR,MENOR,MENORIGUAL,MAYORIGUAL,IGUALIGUAL,DISTINTO,SUMA,MULT,DIV,MOD,
					DESPIZQ,DESPDER,CHAR,INT,NAT,not,
					DP,SWAP1,SWAP2,PABIERTO,PCERRADO,COMILLA,
					CABIERTO,CCERRADO,LLABIERTA,LLCERRADA,COMA,ARROBA,PYC,IGUAL,GUIONBAJO;

// Definición de los no terminales del lenguaje
non terminal TAtributos Programa, Consts, Tipos, Vars,  Subprogramas, Decs, Dec,
			PFs, PF, CS, DecsSubs, DecSub, Designador, Tipo, Componente,
			TiposTupla, TipoBasico, Valores, Insts, Inst, InsAsig, InsR, InsW, ExpIF, ExpWHILE, LLAMADA,
			Parametros, Parametro, ExpBool, Exp, Exp0, Exp1, Exp2, Exp3, Op0, Op1, Op2, Op3,
			Op41, Op42;

// Se definen las reglas sintácticas
//===================PROGRAMA==============================
//Programa → PROGRAM : ident { Consts Tipos Vars Subprogramas INSTRUCTIONS { Insts }}
Programa ::= program DP ident:id LLABIERTA Consts:consts Tipos:tipos Vars:vars Subprogramas:subprogramas INSTRUCTIONS LLABIERTA Insts:insts LLCERRADA LLCERRADA 
{: RESULT= atrb.Programa(id,consts,tipos,vars,subprogramas,insts); :};

//===================CONSTS==============================
//Consts → consts { Decs }; Consts → λ
Consts ::= CONSTS LLABIERTA Decs:decs LLCERRADA {: RESULT= atrb.Consts0(decs); :};
Consts ::= {: RESULT= atrb.Consts1(); :}; //VACIO

//===================TIPOS==============================
//Tipos → TIPOS { Decs }; Tipos → λ
Tipos ::= TIPOS LLABIERTA Decs:decs LLCERRADA {: RESULT= atrb.Tipos0(decs); :};
Tipos ::= {: RESULT= atrb.Tipos1(); :}; //VACIO

//===================VARS==============================
//Vars → VARS { Decs }; Vars → λ
Vars ::= VARS LLABIERTA Decs:decs LLCERRADA {: RESULT= atrb.Vars0(decs); :};
Vars ::= {: RESULT= atrb.Vars1(); :};  //VACIO 

//===================SUBPROGRAMAS==============================
//Subprogramas →  SUBPROGRAMS { Decs }; Subprogramas → Subprograma; Subprogramas → λ
Subprogramas ::= SUBPROGRAMS LLABIERTA Decs:decs LLCERRADA {: RESULT= atrb.Subprogramas0(decs); :};
Subprogramas ::= {: RESULT= atrb.Subprogramas1(); :};

//===================DECS==============================
//Decs → Decs ; Dec; Decs → Dec
Decs ::= Decs:decs Dec:dec PYC {: RESULT= atrb.Decs0(decs,dec); :}; 
Decs ::= Dec:dec PYC {: RESULT= atrb.Decs1(dec); :};

//===================DEC==============================
//Dec → const TipoBasico ident = Valores; Dec → tipo Tipo ident; Dec → var Tipo ident
//Dec → subprogram: ident (PFs) {CS}
Dec ::= CONST TipoBasico:tipobasico ident:id IGUAL Valores:valores {: RESULT= atrb.Dec0(tipobasico,id,valores); :};
Dec ::= TIPO Tipo:tipo ident:id {: RESULT= atrb.Dec1(tipo,id); :};
Dec ::= VAR Tipo:tipo ident:id {: RESULT= atrb.Dec2(tipo,id); :};
Dec ::= SUBPROGRAM DP ident:id PABIERTO PFs:pfs PCERRADO LLABIERTA CS:cs LLCERRADA {: RESULT = atrb.Dec3(id,pfs,cs); :};

//===================PFS==============================
//PFs → PFs, PF | PF;
PFs ::= PFs:pfs COMA PF:pf {: RESULT= atrb.PFs0(pfs,pf); :};
PFs ::= PF:pf {: RESULT= atrb.PFs1(pf);:};

//===================PF==============================
//PF → Tipo ident | Tipo * Designador 
PF ::= Tipo:tipo ident:id {: RESULT= atrb.PF0(tipo,id); :};
PF ::= Tipo:tipo MULT ident:id {: RESULT= atrb.PF1(tipo,id); :};

//===================CS==============================
//CS  → VARS { DecsSubs } INSTRUCTIONS { Insts }
CS  ::= VARS LLABIERTA DecsSubs:decssubs LLCERRADA INSTRUCTIONS LLABIERTA Insts:insts LLCERRADA {: RESULT= atrb.CS(decssubs,insts); :};

//===================DECSSUBS==============================
//DecsSubs→ DecsSubs; DecSub; DecsSubs→ DecSub; DecsSubs→ λ;
DecsSubs ::= DecsSubs:decssubs PYC DecSub:decsub PYC {: RESULT= atrb.DecsSubs0(decssubs,decsub); :};
DecsSubs ::= DecSub:decsub {: RESULT= atrb.DecsSubs1(decsub); :};
DecsSubs ::=  {: RESULT= atrb.DecsSubs2(); :};

//===================DECSUB==============================
//DecSub → VAR Tipo identificador
DecSub ::= VAR Tipo:tipo ident:id {: RESULT= atrb.DecSub0(tipo,id); :};


//===================DESIGNADOR==============================
//designador → ident; designador → designador[Exp]; designador → designador_numero
Designador ::= ident:id {: RESULT= atrb.designador1(id); :};
Designador ::= ident:id CABIERTO Exp:exp CCERRADO {: RESULT= atrb.designador2(id,exp); :};
Designador ::= ident:id GUIONBAJO numero {: RESULT= atrb.designador3(id); :};

//===================TIPO==============================
//Tipo → TipoBasico; Tipo → ident; Tipo → Tipo Dimensiones;
Tipo ::= TipoBasico:tipobasico {: RESULT= atrb.Tipo0(tipobasico); :};
Tipo ::= ident:id {: RESULT= atrb.Tipo1(id); :};
Tipo ::= Tipo:tipo CABIERTO Componente:comp CCERRADO {: RESULT= atrb.Tipo2(tipo,comp); :};
Tipo ::= PABIERTO TiposTupla:tipos PCERRADO {: RESULT= atrb.Tipo3(tipos); :};

//===================COMPONENTE==============================
//componente → numero | ident;
Componente ::= numero:numEnt {: RESULT= atrb.Componente0(numEnt); :};
Componente ::= ident:id {: RESULT= atrb.Componente1(id); :};

//===================TIPOTUPLA==============================
//TiposTupla → TiposTupla, Tipo; TiposTupla → Tipo
TiposTupla ::= TiposTupla:tipostupla COMA Tipo:tipo {: RESULT = atrb.TiposTupla0(tipostupla,tipo); :};
TiposTupla ::= Tipo:tipo {: RESULT = atrb.TiposTupla1(tipo); :};

//===================TIPOBASICO==============================
//TipoBasico → boolean | integer | natural | FLOAT | caracter
TipoBasico ::= BOOLEAN {: RESULT= atrb.TipoBasico0(); :};
TipoBasico ::= INTEGER {: RESULT= atrb.TipoBasico1(); :};
TipoBasico ::= NATURAL {: RESULT= atrb.TipoBasico2(); :};
TipoBasico ::= FLOAT {: RESULT= atrb.TipoBasico3(); :};
TipoBasico ::= CARACTER {: RESULT= atrb.TipoBasico4(); :};

//===================VALORES==============================
//Valores → numeroReal; Valores → numeroEnt; Valores → ’(letra)’; Valores  → ’(digito)’; Valores → true; Valores → false
Valores  ::= numeroNat:numnat {: RESULT= atrb.Valores(numnat); :};
Valores  ::= numeroReal:numreal {: RESULT= atrb.Valores0(numreal); :};
Valores  ::= numeroEnt:numEnt  {: RESULT= atrb.Valores1(numEnt); :};
Valores  ::= COMILLA PABIERTO letra:id PCERRADO COMILLA {: RESULT= atrb.Valores4(id); :};
Valores  ::= COMILLA PABIERTO digito:id PCERRADO COMILLA {: RESULT= atrb.Valores5(id); :};
Valores  ::= TRUE  {: RESULT= atrb.Valores3(); :};
Valores  ::= FALSE  {: RESULT= atrb.Valores2(); :};

//===================INSTS==============================
//Insts → Insts ; Inst; Insts → Inst
Insts ::= Insts:insts Inst:inst PYC{: RESULT= atrb.Insts0(insts,inst); :};
Insts ::= Inst:inst PYC {: RESULT= atrb.Insts1(inst); :};

//===================INST==============================
//Inst → InsAsig; Inst → InsR; Inst → InsW; Inst → SWAP1(); Inst → SWAP2(); Inst → IF; Inst → WHILE; Inst → LLAMADA
Inst ::= InsAsig:insasig  {: RESULT= atrb.Inst0(insasig); :};
Inst ::= InsR:insr  {: RESULT= atrb.Inst1(insr); :};
Inst ::= InsW:insw {: RESULT= atrb.Inst2(insw); :};
Inst ::= SWAP1 PABIERTO PCERRADO {: RESULT= atrb.Inst3(); :};
Inst ::= SWAP2 PABIERTO PCERRADO {: RESULT= atrb.Inst4(); :};
Inst ::= ExpIF:ExpIf {: RESULT= atrb.Inst5(ExpIf); :};
Inst ::= ExpWHILE:ExpWhile {: RESULT= atrb.Inst6(ExpWhile); :};
Inst ::= LLAMADA:llamada {: RESULT= atrb.Inst7(llamada); :};

//===================INSASIG==============================
//InsAsig → Designador = Exp
InsAsig ::= Designador:desig IGUAL Exp:exp {: RESULT= atrb.InsAsig(desig,exp); :};

//===================INSR==============================
//InsR → in (Exp)
InsR ::= in PABIERTO Designador:desig PCERRADO {: RESULT= atrb.InsR(desig); :};

//===================INSW==============================
//InsW → out (Exp)
InsW ::= out PABIERTO Exp:exp PCERRADO {: RESULT= atrb.InsW(exp); :};

//===================IF================================
//IF → if ExpBool then Insts endif; IF → if  ExpBool then Insts ELSE Insts endif  
ExpIF ::= IF Exp:exp THEN Insts:insts ENDIF {: RESULT= atrb.If0(exp,insts); :};
ExpIF ::= IF Exp:exp THEN Insts:insts1 ELSE Insts:insts2 ENDIF {: RESULT= atrb.If1(exp,insts1,insts2); :};

//===================WHILE==============================
//WHILE → while ExpBool DO Insts endwhile
ExpWHILE ::= WHILE Exp:exp DO Insts:insts ENDWHILE {: RESULT= atrb.While0(exp,insts); :};

//===================LLAMADA==============================
//LLAMADA → Call ident (Parametros)
LLAMADA ::= Call ident:id PABIERTO Parametros:parametros PCERRADO {: RESULT= atrb.Llamada0(id,parametros); :};

//===================PARAMETROS==============================
//Parametros → Parametros, Parametro | Parametro
Parametros ::= Parametros:parametros COMA Parametro:parametro {: RESULT= atrb.Parametros0(parametros,parametro); :};
Parametros ::= Parametro:parametro {: RESULT= atrb.Parametros1(parametro); :};

//===================PARAMETRO==============================
//Parametro → ident = Exp | designador = Exp
Parametro ::= ident:id IGUAL Exp:exp {: RESULT= atrb.Parametro0(id,exp); :};

//===================EXP==============================
//Exp → Exp0 Op0 Exp0; Exp → Exp0
Exp ::= Exp0:exp01 Op0:op0 Exp0:exp02 {: RESULT= atrb.Exp0(exp01,op0,exp02); :};
Exp ::= Exp0:exp01 {: RESULT= atrb.Exp1(exp01); :};

//===================EXP0==============================
//Exp0 → Exp0 Op1 Exp1; Exp0 → Exp0 OR Exp1; Exp0 → Exp1
Exp0 ::= Exp0:exp0 Op1:op1 Exp1:exp1 {: RESULT= atrb.Exp00(exp0,op1,exp1); :};
Exp0 ::= Exp0:exp0 OR Exp1:exp1 {: RESULT= atrb.Exp01(exp0,exp1); :};
Exp0 ::= Exp1:exp1 {: RESULT= atrb.Exp02(exp1); :};

//===================EXP1==============================
//Exp1 → Exp1 Op2 Exp2; Exp1 → Exp1 AND Exp2; Exp1 → Exp2
Exp1 ::= Exp1:exp1 Op2:op2 Exp2:exp2 {: RESULT= atrb.Exp10(exp1,op2,exp2); :};
Exp1 ::= Exp1:exp1 AND Exp2:exp2 {: RESULT= atrb.Exp11(exp1,exp2); :};
Exp1 ::= Exp2:exp2 {: RESULT= atrb.Exp12(exp2); :};

//===================EXP2==============================
//Exp2 → Exp3 Op3 Exp2; Exp2 → Exp3
Exp2 ::= Exp3:exp3 Op3:op3 Exp2:exp2 {: RESULT= atrb.Exp20(exp3,op3,exp2); :}; 
Exp2 ::= Exp3:exp3 {: RESULT= atrb.Exp21(exp3); :};

//===================EXP3==============================
//Exp3 → Op41 designador; Exp3 → Op42 Exp3; Exp3 → - (Exp3);Exp3 → designador | Valores; Exp3 → (Exp)
Exp3 ::= Op41:op41 Designador:desig {: RESULT= atrb.Exp30(op41,desig); :};
Exp3 ::= Op42:op42 Exp3:exp3 {: RESULT= atrb.Exp31(op42,exp3); :};
Exp3 ::= RESTA PABIERTO Exp3:exp3 PCERRADO {: RESULT= atrb.Exp32(exp3); :};
Exp3 ::= Designador:desig {: RESULT= atrb.Exp33(desig); :};
Exp3 ::= Valores:valores {: RESULT= atrb.Exp34(valores); :};
Exp3 ::= PABIERTO Exp:exp PCERRADO {: RESULT= atrb.Exp35(exp); :};

 //Op0
 Op0 ::= MENOR {: RESULT= atrb.Op00(); :};
 Op0 ::= MAYOR {: RESULT= atrb.Op01(); :};
 Op0 ::= MENORIGUAL {: RESULT= atrb.Op02(); :};
 Op0 ::= MAYORIGUAL {: RESULT= atrb.Op03(); :};
 Op0 ::= IGUALIGUAL {: RESULT= atrb.Op04(); :};
 Op0 ::= DISTINTO {: RESULT= atrb.Op05(); :};
 //Op1
 Op1 ::= SUMA {: RESULT= atrb.Op10(); :};
 Op1 ::= RESTA {: RESULT= atrb.Op11(); :};
 //Op2
 Op2 ::= MULT {: RESULT= atrb.Op20(); :}; 
 Op2 ::= DIV {: RESULT= atrb.Op21(); :};
 Op2 ::= MOD {: RESULT= atrb.Op22(); :};
//Op3
Op3 ::= DESPIZQ {: RESULT= atrb.Op30(); :};
Op3 ::= DESPDER {: RESULT= atrb.Op31(); :};
//Op41
Op41 ::= PABIERTO CHAR PCERRADO {: RESULT= atrb.Op410(); :}; 
Op41 ::= PABIERTO INT PCERRADO {: RESULT= atrb.Op411(); :};
Op41 ::= PABIERTO NAT PCERRADO {: RESULT= atrb.Op412(); :};
Op41 ::= PABIERTO FLOAT PCERRADO {: RESULT= atrb.Op413(); :};
//Op42
Op42 ::= not {: RESULT= atrb.Op420(); :};
