
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 07 13:06:22 CEST 2013
//----------------------------------------------------

package src.plg.proto;

import java_cup.runtime.*;
import src.es.ucm.fdi.plg.evlib.TAtributos;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 07 13:06:22 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\017\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\007\000\002\004\002" +
    "\000\002\005\007\000\002\005\002\000\002\006\007\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\007\000\002\010\005\000\002\010\005\000\002\010" +
    "\013\000\002\011\005\000\002\011\003\000\002\012\004" +
    "\000\002\012\005\000\002\013\012\000\002\014\005\000" +
    "\002\014\003\000\002\014\002\000\002\015\005\000\002" +
    "\016\003\000\002\016\006\000\002\016\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\007\000\002\017\005" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\007" +
    "\000\002\023\007\000\002\023\003\000\002\023\003\000" +
    "\002\024\006\000\002\024\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\005\000\002\027\006\000\002\030\006\000" +
    "\002\031\007\000\002\031\011\000\002\032\007\000\002" +
    "\033\007\000\002\034\005\000\002\034\003\000\002\035" +
    "\005\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\041\005\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\043\004\000\002\043\004\000\002\043" +
    "\006\000\002\043\003\000\002\043\003\000\002\043\005" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\003\000\002\045\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\051\003\000\002\051\003" +
    "\000\002\052\005\000\002\052\005\000\002\052\005\000" +
    "\002\052\005\000\002\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\014\004\001\002\000\004\067\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\004\010\001\002\000\004\077\011\001\002\000" +
    "\014\015\ufffe\016\013\020\ufffe\022\ufffe\024\ufffe\001\002" +
    "\000\012\015\ufffc\020\313\022\ufffc\024\ufffc\001\002\000" +
    "\004\077\014\001\002\000\012\017\015\021\021\023\020" +
    "\025\016\001\002\000\014\007\030\035\025\036\024\037" +
    "\031\040\033\001\002\000\004\067\057\001\002\000\006" +
    "\100\054\103\055\001\002\000\020\004\027\007\030\035" +
    "\025\036\024\037\031\040\033\072\032\001\002\000\020" +
    "\004\027\007\030\035\025\036\024\037\031\040\033\072" +
    "\032\001\002\000\006\100\ufff6\103\ufff6\001\002\000\006" +
    "\004\051\075\036\001\002\000\006\004\uffdc\103\uffdc\001" +
    "\002\000\006\004\uffdd\103\uffdd\001\002\000\004\103\050" +
    "\001\002\000\004\103\047\001\002\000\006\004\uffd9\103" +
    "\uffd9\001\002\000\006\004\uffdb\103\uffdb\001\002\000\020" +
    "\004\027\007\030\035\025\036\024\037\031\040\033\072" +
    "\032\001\002\000\006\004\uffda\103\uffda\001\002\000\006" +
    "\073\045\101\044\001\002\000\010\073\uffde\075\036\101" +
    "\uffde\001\002\000\006\004\041\013\037\001\002\000\004" +
    "\076\uffe1\001\002\000\004\076\042\001\002\000\004\076" +
    "\uffe0\001\002\000\004\103\043\001\002\000\014\004\uffe3" +
    "\056\uffe3\073\uffe3\075\uffe3\101\uffe3\001\002\000\020\004" +
    "\027\007\030\035\025\036\024\037\031\040\033\072\032" +
    "\001\002\000\014\004\uffe2\056\uffe2\073\uffe2\075\uffe2\101" +
    "\uffe2\001\002\000\010\073\uffdf\075\036\101\uffdf\001\002" +
    "\000\014\004\uffe4\056\uffe4\073\uffe4\075\uffe4\101\uffe4\001" +
    "\002\000\014\004\uffe5\056\uffe5\073\uffe5\075\uffe5\101\uffe5" +
    "\001\002\000\006\100\ufff4\103\ufff4\001\002\000\006\004" +
    "\053\075\036\001\002\000\006\100\ufff3\103\ufff3\001\002" +
    "\000\012\015\uffff\020\uffff\022\uffff\024\uffff\001\002\000" +
    "\012\017\015\021\021\023\020\025\016\001\002\000\006" +
    "\100\ufff7\103\ufff7\001\002\000\004\004\060\001\002\000" +
    "\004\072\061\001\002\000\020\004\027\007\030\035\025" +
    "\036\024\037\031\040\033\072\032\001\002\000\006\073" +
    "\071\101\070\001\002\000\006\073\ufff0\101\ufff0\001\002" +
    "\000\010\004\066\056\065\075\036\001\002\000\004\004" +
    "\067\001\002\000\006\073\uffef\101\uffef\001\002\000\006" +
    "\073\uffee\101\uffee\001\002\000\020\004\027\007\030\035" +
    "\025\036\024\037\031\040\033\072\032\001\002\000\004" +
    "\077\072\001\002\000\004\022\074\001\002\000\004\100" +
    "\304\001\002\000\004\077\075\001\002\000\010\023\077" +
    "\100\uffea\103\uffea\001\002\000\006\100\uffeb\103\uffeb\001" +
    "\002\000\020\004\027\007\030\035\025\036\024\037\031" +
    "\040\033\072\032\001\002\000\006\100\101\103\102\001" +
    "\002\000\004\015\104\001\002\000\004\023\077\001\002" +
    "\000\006\100\uffec\103\uffec\001\002\000\004\077\105\001" +
    "\002\000\022\004\120\031\106\034\121\043\124\044\116" +
    "\045\114\070\112\071\110\001\002\000\026\004\120\010" +
    "\137\011\142\012\133\041\134\042\143\046\152\066\132" +
    "\072\147\074\141\001\002\000\004\103\uffcd\001\002\000" +
    "\004\072\274\001\002\000\004\103\uffc9\001\002\000\004" +
    "\072\272\001\002\000\004\103\uffce\001\002\000\004\004" +
    "\260\001\002\000\004\103\uffcf\001\002\000\004\072\255" +
    "\001\002\000\004\103\uffc8\001\002\000\054\032\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\073" +
    "\uffe8\075\251\076\uffe8\101\uffe8\103\uffe8\104\uffe8\105\250" +
    "\001\002\000\002\001\002\000\006\100\235\103\236\001" +
    "\002\000\004\103\uffca\001\002\000\004\072\232\001\002" +
    "\000\004\104\130\001\002\000\004\103\127\001\002\000" +
    "\014\027\uffd0\030\uffd0\033\uffd0\100\uffd0\103\uffd0\001\002" +
    "\000\026\004\120\010\137\011\142\012\133\041\134\042" +
    "\143\046\152\066\132\072\147\074\141\001\002\000\046" +
    "\032\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0" +
    "\062\uffb0\073\uffb0\076\uffb0\101\uffb0\103\uffb0\001\002\000" +
    "\026\004\uff9c\010\uff9c\011\uff9c\012\uff9c\041\uff9c\042\uff9c" +
    "\046\uff9c\066\uff9c\072\uff9c\074\uff9c\001\002\000\050\032" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062" +
    "\uffd8\073\uffd8\076\uffd8\100\uffd8\101\uffd8\103\uffd8\001\002" +
    "\000\050\032\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\061\uffd3\062\uffd3\073\uffd3\076\uffd3\100\uffd3\101\uffd3\103" +
    "\uffd3\001\002\000\026\004\120\010\137\011\142\012\133" +
    "\041\134\042\143\046\152\066\132\072\147\074\141\001" +
    "\002\000\004\004\120\001\002\000\050\032\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\073\uffd7" +
    "\076\uffd7\100\uffd7\101\uffd7\103\uffd7\001\002\000\004\103" +
    "\uffc7\001\002\000\004\072\221\001\002\000\050\032\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6" +
    "\073\uffd6\076\uffd6\100\uffd6\101\uffd6\103\uffd6\001\002\000" +
    "\050\032\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\073\uffd2\076\uffd2\100\uffd2\101\uffd2\103\uffd2" +
    "\001\002\000\046\032\uffb4\046\uffb4\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4" +
    "\060\uffb4\061\216\062\215\073\uffb4\076\uffb4\101\uffb4\103" +
    "\uffb4\001\002\000\042\032\uffb6\046\uffb6\047\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\073\uffb6\076\uffb6\101\uffb6\103\uffb6\001\002" +
    "\000\042\032\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\174\057\175\060\173" +
    "\073\uffb9\076\uffb9\101\uffb9\103\uffb9\001\002\000\036\004" +
    "\120\010\137\011\142\012\133\040\206\041\134\042\143" +
    "\046\152\063\204\064\203\065\205\066\132\072\147\074" +
    "\141\001\002\000\034\032\uffbc\046\167\047\164\050\161" +
    "\051\156\052\163\053\165\054\166\055\162\073\uffbc\076" +
    "\uffbc\101\uffbc\103\uffbc\001\002\000\046\032\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\073\uffaf" +
    "\076\uffaf\101\uffaf\103\uffaf\001\002\000\004\072\153\001" +
    "\002\000\026\004\120\010\137\011\142\012\133\041\134" +
    "\042\143\046\152\066\132\072\147\074\141\001\002\000" +
    "\004\073\155\001\002\000\046\032\uffb1\046\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\073\uffb1\076\uffb1" +
    "\101\uffb1\103\uffb1\001\002\000\026\004\uffab\010\uffab\011" +
    "\uffab\012\uffab\041\uffab\042\uffab\046\uffab\066\uffab\072\uffab" +
    "\074\uffab\001\002\000\026\004\120\010\137\011\142\012" +
    "\133\041\134\042\143\046\152\066\132\072\147\074\141" +
    "\001\002\000\026\004\120\010\137\011\142\012\133\041" +
    "\134\042\143\046\152\066\132\072\147\074\141\001\002" +
    "\000\026\004\uffad\010\uffad\011\uffad\012\uffad\041\uffad\042" +
    "\uffad\046\uffad\066\uffad\072\uffad\074\uffad\001\002\000\026" +
    "\004\uffa7\010\uffa7\011\uffa7\012\uffa7\041\uffa7\042\uffa7\046" +
    "\uffa7\066\uffa7\072\uffa7\074\uffa7\001\002\000\026\004\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\041\uffaa\042\uffaa\046\uffaa\066" +
    "\uffaa\072\uffaa\074\uffaa\001\002\000\026\004\uffac\010\uffac" +
    "\011\uffac\012\uffac\041\uffac\042\uffac\046\uffac\066\uffac\072" +
    "\uffac\074\uffac\001\002\000\026\004\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\041\uffa9\042\uffa9\046\uffa9\066\uffa9\072\uffa9\074" +
    "\uffa9\001\002\000\026\004\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\041\uffa8\042\uffa8\046\uffa8\066\uffa8\072\uffa8\074\uffa8\001" +
    "\002\000\026\004\uffa6\010\uffa6\011\uffa6\012\uffa6\041\uffa6" +
    "\042\uffa6\046\uffa6\066\uffa6\072\uffa6\074\uffa6\001\002\000" +
    "\026\004\120\010\137\011\142\012\133\041\134\042\143" +
    "\046\152\066\132\072\147\074\141\001\002\000\042\032" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\174\057\175\060\173\073\uffba\076" +
    "\uffba\101\uffba\103\uffba\001\002\000\026\004\120\010\137" +
    "\011\142\012\133\041\134\042\143\046\152\066\132\072" +
    "\147\074\141\001\002\000\026\004\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\041\uffa3\042\uffa3\046\uffa3\066\uffa3\072\uffa3\074" +
    "\uffa3\001\002\000\026\004\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\041\uffa5\042\uffa5\046\uffa5\066\uffa5\072\uffa5\074\uffa5\001" +
    "\002\000\026\004\uffa4\010\uffa4\011\uffa4\012\uffa4\041\uffa4" +
    "\042\uffa4\046\uffa4\066\uffa4\072\uffa4\074\uffa4\001\002\000" +
    "\026\004\120\010\137\011\142\012\133\041\134\042\143" +
    "\046\152\066\132\072\147\074\141\001\002\000\042\032" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\073\uffb7\076" +
    "\uffb7\101\uffb7\103\uffb7\001\002\000\042\032\uffb8\046\uffb8" +
    "\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\073\uffb8\076\uffb8\101\uffb8" +
    "\103\uffb8\001\002\000\020\032\uffbd\046\167\055\162\073" +
    "\uffbd\076\uffbd\101\uffbd\103\uffbd\001\002\000\042\032\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\174\057\175\060\173\073\uffbb\076\uffbb" +
    "\101\uffbb\103\uffbb\001\002\000\004\073\214\001\002\000" +
    "\004\073\213\001\002\000\004\073\212\001\002\000\004" +
    "\073\211\001\002\000\004\073\210\001\002\000\046\032" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\073\uffae\076\uffae\101\uffae\103\uffae\001\002\000\004" +
    "\004\uff9d\001\002\000\004\004\uff9e\001\002\000\004\004" +
    "\uffa0\001\002\000\004\004\uff9f\001\002\000\026\004\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\041\uffa1\042\uffa1\046\uffa1\066" +
    "\uffa1\072\uffa1\074\uffa1\001\002\000\026\004\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\041\uffa2\042\uffa2\046\uffa2\066\uffa2\072" +
    "\uffa2\074\uffa2\001\002\000\026\004\120\010\137\011\142" +
    "\012\133\041\134\042\143\046\152\066\132\072\147\074" +
    "\141\001\002\000\042\032\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\073\uffb5\076\uffb5\101\uffb5\103\uffb5\001\002" +
    "\000\006\005\222\006\223\001\002\000\004\073\226\001" +
    "\002\000\004\073\224\001\002\000\004\074\225\001\002" +
    "\000\050\032\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052" +
    "\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\073\uffd4\076\uffd4\100\uffd4\101\uffd4\103" +
    "\uffd4\001\002\000\004\074\227\001\002\000\050\032\uffd5" +
    "\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\073\uffd5\076\uffd5\100\uffd5\101\uffd5\103\uffd5\001\002\000" +
    "\046\032\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\073\uffb3\076\uffb3\101\uffb3\103\uffb3\001\002" +
    "\000\046\032\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\073\uffb2\076\uffb2\101\uffb2\103\uffb2\001" +
    "\002\000\026\004\120\010\137\011\142\012\133\041\134" +
    "\042\143\046\152\066\132\072\147\074\141\001\002\000" +
    "\004\073\234\001\002\000\004\103\uffc6\001\002\000\004" +
    "\100\uffed\001\002\000\022\004\120\031\106\034\121\043" +
    "\124\044\116\045\114\070\112\071\110\001\002\000\004" +
    "\103\240\001\002\000\014\027\uffd1\030\uffd1\033\uffd1\100" +
    "\uffd1\103\uffd1\001\002\000\004\026\242\001\002\000\022" +
    "\004\120\031\106\034\121\043\124\044\116\045\114\070" +
    "\112\071\110\001\002\000\010\027\244\030\245\103\236" +
    "\001\002\000\022\004\120\031\106\034\121\043\124\044" +
    "\116\045\114\070\112\071\110\001\002\000\004\103\uffc4" +
    "\001\002\000\006\030\247\103\236\001\002\000\004\103" +
    "\uffc3\001\002\000\004\013\254\001\002\000\026\004\120" +
    "\010\137\011\142\012\133\041\134\042\143\046\152\066" +
    "\132\072\147\074\141\001\002\000\004\076\253\001\002" +
    "\000\050\032\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\073\uffe7\076\uffe7\101\uffe7\103\uffe7\104" +
    "\uffe7\001\002\000\050\032\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\073\uffe6\076\uffe6\101\uffe6" +
    "\103\uffe6\104\uffe6\001\002\000\026\004\120\010\137\011" +
    "\142\012\133\041\134\042\143\046\152\066\132\072\147" +
    "\074\141\001\002\000\004\073\257\001\002\000\004\103" +
    "\uffc5\001\002\000\004\072\261\001\002\000\004\004\263" +
    "\001\002\000\006\073\uffbf\101\uffbf\001\002\000\004\104" +
    "\270\001\002\000\006\073\266\101\265\001\002\000\004" +
    "\004\263\001\002\000\004\103\uffc1\001\002\000\006\073" +
    "\uffc0\101\uffc0\001\002\000\026\004\120\010\137\011\142" +
    "\012\133\041\134\042\143\046\152\066\132\072\147\074" +
    "\141\001\002\000\006\073\uffbe\101\uffbe\001\002\000\004" +
    "\073\273\001\002\000\004\103\uffcc\001\002\000\004\073" +
    "\275\001\002\000\004\103\uffcb\001\002\000\004\032\277" +
    "\001\002\000\022\004\120\031\106\034\121\043\124\044" +
    "\116\045\114\070\112\071\110\001\002\000\006\033\301" +
    "\103\236\001\002\000\004\103\uffc2\001\002\000\006\004" +
    "\303\075\036\001\002\000\006\100\uffe9\103\uffe9\001\002" +
    "\000\006\100\ufff2\103\ufff2\001\002\000\006\073\ufff1\101" +
    "\ufff1\001\002\000\004\004\307\001\002\000\004\104\310" +
    "\001\002\000\016\010\137\011\142\012\133\041\134\042" +
    "\143\074\141\001\002\000\006\100\ufff5\103\ufff5\001\002" +
    "\000\010\015\ufffa\022\321\024\ufffa\001\002\000\004\077" +
    "\314\001\002\000\012\017\015\021\021\023\020\025\016" +
    "\001\002\000\006\100\316\103\055\001\002\000\004\103" +
    "\317\001\002\000\010\015\ufffd\022\ufffd\024\ufffd\001\002" +
    "\000\006\015\ufff8\024\326\001\002\000\004\077\322\001" +
    "\002\000\012\017\015\021\021\023\020\025\016\001\002" +
    "\000\006\100\324\103\055\001\002\000\004\103\325\001" +
    "\002\000\006\015\ufffb\024\ufffb\001\002\000\004\077\335" +
    "\001\002\000\004\015\330\001\002\000\004\077\331\001" +
    "\002\000\022\004\120\031\106\034\121\043\124\044\116" +
    "\045\114\070\112\071\110\001\002\000\006\100\333\103" +
    "\236\001\002\000\004\100\334\001\002\000\004\002\001" +
    "\001\002\000\012\017\015\021\021\023\020\025\016\001" +
    "\002\000\006\100\337\103\055\001\002\000\004\103\340" +
    "\001\002\000\004\015\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\004\004\311\001" +
    "\001\000\002\001\001\000\006\007\016\010\021\001\001" +
    "\000\004\022\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\051\022\025\001\001\000\006\017\022" +
    "\022\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\034\021\033\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\045\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\061\012\062\017\063\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\304" +
    "\017\063\022\025\001\001\000\002\001\001\000\004\013" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\077\015\075\001\001\000\002\001\001\000\006\017" +
    "\301\022\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\124\024\121\025\125\026\114\027\112" +
    "\030\106\031\122\032\110\033\116\001\001\000\024\016" +
    "\130\023\150\037\275\040\147\041\145\042\144\043\143" +
    "\052\135\053\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\240\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\130\023\150\037\137\040\147\041\145\042\144\043" +
    "\143\052\135\053\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\130\023\150\043\230\052\135\053\134\001\001\000\004" +
    "\016\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\216\001\001\000\002\001\001\000\006\047\171\050" +
    "\175\001\001\000\024\016\130\023\150\037\206\040\147" +
    "\041\145\042\144\043\143\052\135\053\134\001\001\000" +
    "\010\044\157\045\156\046\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\130\023\150\043\153\052" +
    "\135\053\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\130\023\150\041\201\042" +
    "\144\043\143\052\135\053\134\001\001\000\022\016\130" +
    "\023\150\040\200\041\145\042\144\043\143\052\135\053" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\130\023\150\041\170" +
    "\042\144\043\143\052\135\053\134\001\001\000\006\047" +
    "\171\050\175\001\001\000\016\016\130\023\150\042\177" +
    "\043\143\052\135\053\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\130\023\150" +
    "\042\176\043\143\052\135\053\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\156\046\167\001\001" +
    "\000\006\047\171\050\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\130\023\150\042\217\043" +
    "\143\052\135\053\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\130\023" +
    "\150\037\232\040\147\041\145\042\144\043\143\052\135" +
    "\053\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\124\025\236\026\114\027\112" +
    "\030\106\031\122\032\110\033\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\124" +
    "\024\242\025\125\026\114\027\112\030\106\031\122\032" +
    "\110\033\116\001\001\000\002\001\001\000\024\016\124" +
    "\024\245\025\125\026\114\027\112\030\106\031\122\032" +
    "\110\033\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\130\023" +
    "\150\037\251\040\147\041\145\042\144\043\143\052\135" +
    "\053\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\016\130\023\150\037\255\040\147" +
    "\041\145\042\144\043\143\052\135\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\263\035\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\130\023\150\037" +
    "\270\040\147\041\145\042\144\043\143\052\135\053\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\124\024\277\025\125\026\114\027\112\030" +
    "\106\031\122\032\110\033\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\310\001\001\000\002\001\001\000" +
    "\004\005\317\001\001\000\002\001\001\000\006\007\314" +
    "\010\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\326\001\001\000\002\001\001" +
    "\000\006\007\322\010\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\124\024\331\025" +
    "\125\026\114\027\112\030\106\031\122\032\110\033\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\335\010\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


   private EAtribucion atrb = new EAtribucion();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Op42 ::= not 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op420(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op42",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Op41 ::= PABIERTO FLOAT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op413(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Op41 ::= PABIERTO NAT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op412(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Op41 ::= PABIERTO INT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op411(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op41 ::= PABIERTO CHAR PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op410(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Op3 ::= DESPDER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op31(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Op3 ::= DESPIZQ 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op30(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Op2 ::= MOD 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op22(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Op2 ::= DIV 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op21(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Op2 ::= MULT 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op20(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op1 ::= RESTA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op11(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op1 ::= SUMA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op10(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op0 ::= DISTINTO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op05(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op0 ::= IGUALIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op04(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op0 ::= MAYORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op03(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Op0 ::= MENORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op02(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op0 ::= MAYOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op01(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Op0 ::= MENOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op00(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp3 ::= PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp35(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp3 ::= Valores 
            {
              TAtributos RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp34(valores); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp3 ::= Designador 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp33(desig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp3 ::= RESTA PABIERTO Exp3 PCERRADO 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp32(exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp3 ::= Op42 Exp3 
            {
              TAtributos RESULT =null;
		int op42left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op42right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op42 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp31(op42,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp3 ::= Op41 Designador 
            {
              TAtributos RESULT =null;
		int op41left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op41right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op41 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp30(op41,desig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp2 ::= Exp3 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp21(exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp2 ::= Exp3 Op3 Exp2 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp20(exp3,op3,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= Exp2 
            {
              TAtributos RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp12(exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp1 ::= Exp1 AND1 Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp11(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp1 ::= Exp1 Op2 Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp10(exp1,op2,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp0 ::= Exp1 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp02(exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp0 ::= Exp0 OR Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp01(exp0,exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp0 ::= Exp0 Op1 Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp00(exp0,op1,exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp1(exp01); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp ::= Exp0 Op0 Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp02left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp02right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp02 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp0(exp01,op0,exp02); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Parametro ::= ident IGUAL Exp 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametro0(id,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Parametros ::= Parametro 
            {
              TAtributos RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametros1(parametro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Parametros ::= Parametros COMA Parametro 
            {
              TAtributos RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametros0(parametros,parametro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA ::= Call ident PABIERTO Parametros PCERRADO 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Llamada0(id,parametros); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpWHILE ::= WHILE Exp DO Insts ENDWHILE 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.While0(exp,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpWHILE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpIF ::= IF ExpBool THEN Insts ELSE Insts ENDIF 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int insts1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int insts1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.If1(expbool,insts1,insts2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIF",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpIF ::= IF ExpBool THEN Insts ENDIF 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.If0(expbool,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIF",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsW ::= out PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsW(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsW",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsR ::= in PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsR(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsAsig ::= Designador IGUAL Exp 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InsAsig(desig,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsAsig",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Inst ::= LLAMADA 
            {
              TAtributos RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos llamada = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst7(llamada); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Inst ::= ExpWHILE 
            {
              TAtributos RESULT =null;
		int ExpWhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExpWhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos ExpWhile = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst6(ExpWhile); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Inst ::= ExpIF 
            {
              TAtributos RESULT =null;
		int ExpIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExpIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos ExpIf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst5(ExpIf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Inst ::= SWAP2 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Inst4(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Inst ::= SWAP1 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Inst3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Inst ::= InsW 
            {
              TAtributos RESULT =null;
		int inswleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inswright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insw = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst2(insw); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Inst ::= InsR 
            {
              TAtributos RESULT =null;
		int insrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insr = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst1(insr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Inst ::= InsAsig 
            {
              TAtributos RESULT =null;
		int insasigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insasigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insasig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst0(insasig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Insts ::= Inst PYC 
            {
              TAtributos RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Insts1(inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Insts ::= Insts PYC Inst PYC 
            {
              TAtributos RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Insts0(insts,inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Valores ::= FALSE 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Valores2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Valores ::= TRUE 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Valores3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Valores ::= COMILLA PABIERTO digito PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Valores5(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Valores ::= COMILLA PABIERTO letra PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Valores4(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores ::= numeroEnt 
            {
              TAtributos RESULT =null;
		int numEntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numEntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numEnt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores1(numEnt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores ::= numeroReal 
            {
              TAtributos RESULT =null;
		int numrealleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numrealright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float numreal = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores0(numreal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valores ::= numeroNat 
            {
              TAtributos RESULT =null;
		int numnatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numnatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numnat = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores(numnat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoBasico ::= caracter 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico4(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoBasico ::= FLOAT 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoBasico ::= NATURAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoBasico ::= INTEGER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TipoBasico ::= BOOLEAN 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico0(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposTupla ::= Tipo 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.TiposTupla1(tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TiposTupla ::= TiposTupla COMA Tipo 
            {
              TAtributos RESULT =null;
		int tipostuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipostuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipostupla = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.TiposTupla0(tipostupla,tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Componente ::= ident 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Componente1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Componente ::= numero 
            {
              TAtributos RESULT =null;
		int numEntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numEntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numEnt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Componente0(numEnt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= PABIERTO TiposTupla PCERRADO 
            {
              TAtributos RESULT =null;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo3(tipos); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= Tipo CABIERTO Componente CCERRADO PYC 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos comp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Tipo2(tipo,comp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= ident PYC 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= TipoBasico PYC 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo0(tipobasico); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Designador ::= ident GUIONBAJO numero 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.designador3(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Designador ::= ident CABIERTO Exp CCERRADO 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.designador2(id,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Designador ::= ident 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.designador1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecSub ::= var Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecSub0(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecSub",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecsSubs ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.DecsSubs2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecsSubs ::= DecSub 
            {
              TAtributos RESULT =null;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubs1(decsub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecsSubs ::= DecsSubs PYC DecSub 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubs0(decssubs,decsub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CS ::= vars LLABIERTA DecsSubs LLCERRADA instructions LLABIERTA Insts LLCERRADA 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.CS(decssubs,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PF ::= Tipo MULT ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PF1(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PF ::= Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PF0(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PFs ::= PF 
            {
              TAtributos RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFs1(pf);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PFs ::= PFs COMA PF 
            {
              TAtributos RESULT =null;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFs0(pfs,pf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dec ::= subprogram DP ident PABIERTO PFs PCERRADO LLABIERTA CS LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos cs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = atrb.Dec3(id,pfs,cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dec ::= var Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec2(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Dec ::= tipo Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec1(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec ::= CONST TipoBasico ident IGUAL Valores 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec0(tipobasico,id,valores); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decs ::= Dec 
            {
              TAtributos RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Decs1(dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decs ::= Decs PYC Dec 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Decs0(decs,dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Subprogramas ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Subprogramas1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Subprogramas ::= subprograms LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Subprogramas0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Vars ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Vars1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Vars ::= vars LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Vars0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipos ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Tipos1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Tipos ::= tipos LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Tipos0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Consts ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Consts1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Consts ::= CONSTS LLABIERTA Decs LLCERRADA 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Consts0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos start_val = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= program DP ident LLABIERTA Consts Tipos Vars Subprogramas instructions LLABIERTA Insts LLCERRADA LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TAtributos consts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TAtributos vars = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int subprogramasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int subprogramasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos subprogramas = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Programa( consts,tipos,vars,subprogramas,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

