
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 03 13:02:24 CEST 2013
//----------------------------------------------------

package src.plg.proto;

import java_cup.runtime.*;
import src.es.ucm.fdi.plg.evlib.TAtributos;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 03 13:02:24 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\017\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\007\000\002\004\002" +
    "\000\002\005\007\000\002\005\002\000\002\006\007\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\007\000\002\010\005\000\002\010\005\000\002\010" +
    "\013\000\002\011\005\000\002\011\003\000\002\012\004" +
    "\000\002\012\005\000\002\013\012\000\002\014\005\000" +
    "\002\014\003\000\002\014\002\000\002\015\005\000\002" +
    "\016\006\000\002\016\005\000\002\017\004\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\020\006" +
    "\000\002\020\005\000\002\021\003\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\007" +
    "\000\002\024\007\000\002\024\003\000\002\024\003\000" +
    "\002\025\006\000\002\025\004\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\030\006\000\002\031\006\000" +
    "\002\032\007\000\002\032\011\000\002\033\007\000\002" +
    "\034\007\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\036\005\000\002\040\005\000\002\040\003" +
    "\000\002\041\005\000\002\041\005\000\002\041\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\043\005\000\002\043\003\000\002\044\004\000\002\044" +
    "\004\000\002\044\006\000\002\044\003\000\002\044\003" +
    "\000\002\044\005\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\046\003\000\002\046\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\012\004\001\002\000\004\066\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\004\010\001\002\000\004\076\011\001\002\000" +
    "\014\013\ufffe\014\013\016\ufffe\020\ufffe\022\ufffe\001\002" +
    "\000\012\013\ufffc\016\320\020\ufffc\022\ufffc\001\002\000" +
    "\004\076\014\001\002\000\012\015\015\017\021\021\020" +
    "\023\016\001\002\000\014\007\031\033\033\034\030\035" +
    "\023\036\025\001\002\000\004\066\167\001\002\000\006" +
    "\077\164\102\165\001\002\000\020\004\027\007\031\033" +
    "\033\034\030\035\023\036\025\071\032\001\002\000\020" +
    "\004\027\007\031\033\033\034\030\035\023\036\025\071" +
    "\032\001\002\000\006\077\ufff6\102\ufff6\001\002\000\006" +
    "\004\uffda\102\uffda\001\002\000\006\004\055\074\041\001" +
    "\002\000\006\004\uffd9\102\uffd9\001\002\000\004\102\054" +
    "\001\002\000\004\102\053\001\002\000\006\004\uffdb\102" +
    "\uffdb\001\002\000\006\004\uffd8\102\uffd8\001\002\000\020" +
    "\004\027\007\031\033\033\034\030\035\023\036\025\071" +
    "\032\001\002\000\006\004\uffdc\102\uffdc\001\002\000\010" +
    "\072\uffdd\074\041\100\uffdd\001\002\000\006\072\037\100" +
    "\036\001\002\000\020\004\027\007\031\033\033\034\030" +
    "\035\023\036\025\071\032\001\002\000\014\004\uffe3\055" +
    "\uffe3\072\uffe3\074\uffe3\100\uffe3\001\002\000\010\072\uffde" +
    "\074\041\100\uffde\001\002\000\006\004\047\037\045\001" +
    "\002\000\006\074\043\102\044\001\002\000\006\004\047" +
    "\037\045\001\002\000\014\004\uffe4\055\uffe4\072\uffe4\074" +
    "\uffe4\100\uffe4\001\002\000\004\075\uffe0\001\002\000\004" +
    "\075\050\001\002\000\004\075\uffdf\001\002\000\006\074" +
    "\uffe2\102\uffe2\001\002\000\004\075\052\001\002\000\006" +
    "\074\uffe1\102\uffe1\001\002\000\014\004\uffe5\055\uffe5\072" +
    "\uffe5\074\uffe5\100\uffe5\001\002\000\014\004\uffe6\055\uffe6" +
    "\072\uffe6\074\uffe6\100\uffe6\001\002\000\006\077\ufff4\102" +
    "\ufff4\001\002\000\004\074\041\001\002\000\012\074\061" +
    "\077\ufff3\102\ufff3\104\060\001\002\000\004\037\163\001" +
    "\002\000\022\010\071\011\066\040\065\041\076\045\074" +
    "\065\063\071\075\073\101\001\002\000\032\045\156\046" +
    "\153\047\150\050\145\051\152\052\154\053\155\054\151" +
    "\072\uffbb\075\uffbb\100\uffbb\102\uffbb\001\002\000\022\010" +
    "\uff9b\011\uff9b\040\uff9b\041\uff9b\045\uff9b\065\uff9b\071\uff9b" +
    "\073\uff9b\001\002\000\004\075\144\001\002\000\046\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\072" +
    "\uffd3\075\uffd3\077\uffd3\100\uffd3\102\uffd3\001\002\000\046" +
    "\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\072\uffd6\075\uffd6\077\uffd6\100\uffd6\102\uffd6\001\002\000" +
    "\022\010\071\011\066\040\065\041\076\045\074\065\063" +
    "\071\075\073\101\001\002\000\002\001\002\000\046\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\072" +
    "\uffd7\075\uffd7\077\uffd7\100\uffd7\102\uffd7\001\002\000\044" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\072\uffae\075\uffae\100\uffae\102\uffae\001\002\000\050\045" +
    "\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\072" +
    "\uffaf\074\061\075\uffaf\100\uffaf\102\uffaf\104\060\001\002" +
    "\000\004\071\137\001\002\000\032\010\071\011\066\036" +
    "\131\040\065\041\076\045\074\062\130\063\125\064\126" +
    "\065\063\071\075\073\101\001\002\000\046\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\072\uffd2\075" +
    "\uffd2\077\uffd2\100\uffd2\102\uffd2\001\002\000\044\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\122\061\121\072\uffb3" +
    "\075\uffb3\100\uffb3\102\uffb3\001\002\000\040\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\072\uffb5\075\uffb5\100\uffb5\102" +
    "\uffb5\001\002\000\004\071\112\001\002\000\040\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\105\056\106\057\104\072\uffb8\075\uffb8\100\uffb8" +
    "\102\uffb8\001\002\000\022\010\071\011\066\040\065\041" +
    "\076\045\074\065\063\071\075\073\101\001\002\000\022" +
    "\010\uffa2\011\uffa2\040\uffa2\041\uffa2\045\uffa2\065\uffa2\071" +
    "\uffa2\073\uffa2\001\002\000\022\010\uffa4\011\uffa4\040\uffa4" +
    "\041\uffa4\045\uffa4\065\uffa4\071\uffa4\073\uffa4\001\002\000" +
    "\022\010\uffa3\011\uffa3\040\uffa3\041\uffa3\045\uffa3\065\uffa3" +
    "\071\uffa3\073\uffa3\001\002\000\022\010\071\011\066\040" +
    "\065\041\076\045\074\065\063\071\075\073\101\001\002" +
    "\000\040\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\072\uffb6" +
    "\075\uffb6\100\uffb6\102\uffb6\001\002\000\040\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\057\uffb7\072\uffb7\075\uffb7\100\uffb7\102" +
    "\uffb7\001\002\000\006\005\113\006\114\001\002\000\004" +
    "\072\117\001\002\000\004\072\115\001\002\000\004\073" +
    "\116\001\002\000\046\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\060\uffd4\061\uffd4\072\uffd4\075\uffd4\077\uffd4\100\uffd4" +
    "\102\uffd4\001\002\000\004\073\120\001\002\000\046\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\072" +
    "\uffd5\075\uffd5\077\uffd5\100\uffd5\102\uffd5\001\002\000\022" +
    "\010\uffa0\011\uffa0\040\uffa0\041\uffa0\045\uffa0\065\uffa0\071" +
    "\uffa0\073\uffa0\001\002\000\022\010\uffa1\011\uffa1\040\uffa1" +
    "\041\uffa1\045\uffa1\065\uffa1\071\uffa1\073\uffa1\001\002\000" +
    "\022\010\071\011\066\040\065\041\076\045\074\065\063" +
    "\071\075\073\101\001\002\000\040\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\072\uffb4\075\uffb4\100\uffb4\102\uffb4\001" +
    "\002\000\004\072\136\001\002\000\004\072\135\001\002" +
    "\000\004\072\134\001\002\000\004\072\133\001\002\000" +
    "\004\072\132\001\002\000\002\001\002\000\002\001\002" +
    "\000\044\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad" +
    "\061\uffad\072\uffad\075\uffad\100\uffad\102\uffad\001\002\000" +
    "\002\001\002\000\002\001\002\000\022\010\071\011\066" +
    "\040\065\041\076\045\074\065\063\071\075\073\101\001" +
    "\002\000\004\072\141\001\002\000\044\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\072\uffb0\075\uffb0" +
    "\100\uffb0\102\uffb0\001\002\000\050\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\072\uffb2\074\061\075" +
    "\uffb2\100\uffb2\102\uffb2\104\060\001\002\000\044\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\072\uffb1" +
    "\075\uffb1\100\uffb1\102\uffb1\001\002\000\054\045\uffe8\046" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\072\uffe8\074" +
    "\uffe8\075\uffe8\077\uffe8\100\uffe8\102\uffe8\103\uffe8\104\uffe8" +
    "\001\002\000\022\010\uffaa\011\uffaa\040\uffaa\041\uffaa\045" +
    "\uffaa\065\uffaa\071\uffaa\073\uffaa\001\002\000\022\010\071" +
    "\011\066\040\065\041\076\045\074\065\063\071\075\073" +
    "\101\001\002\000\022\010\071\011\066\040\065\041\076" +
    "\045\074\065\063\071\075\073\101\001\002\000\022\010" +
    "\uffac\011\uffac\040\uffac\041\uffac\045\uffac\065\uffac\071\uffac" +
    "\073\uffac\001\002\000\022\010\uffa6\011\uffa6\040\uffa6\041" +
    "\uffa6\045\uffa6\065\uffa6\071\uffa6\073\uffa6\001\002\000\022" +
    "\010\uffa9\011\uffa9\040\uffa9\041\uffa9\045\uffa9\065\uffa9\071" +
    "\uffa9\073\uffa9\001\002\000\022\010\uffab\011\uffab\040\uffab" +
    "\041\uffab\045\uffab\065\uffab\071\uffab\073\uffab\001\002\000" +
    "\022\010\uffa8\011\uffa8\040\uffa8\041\uffa8\045\uffa8\065\uffa8" +
    "\071\uffa8\073\uffa8\001\002\000\022\010\uffa7\011\uffa7\040" +
    "\uffa7\041\uffa7\045\uffa7\065\uffa7\071\uffa7\073\uffa7\001\002" +
    "\000\022\010\uffa5\011\uffa5\040\uffa5\041\uffa5\045\uffa5\065" +
    "\uffa5\071\uffa5\073\uffa5\001\002\000\022\010\071\011\066" +
    "\040\065\041\076\045\074\065\063\071\075\073\101\001" +
    "\002\000\040\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\105\056\106\057\104\072" +
    "\uffb9\075\uffb9\100\uffb9\102\uffb9\001\002\000\016\045\156" +
    "\054\151\072\uffbc\075\uffbc\100\uffbc\102\uffbc\001\002\000" +
    "\040\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\053\uffba\054\uffba\055\105\056\106\057\104\072\uffba\075" +
    "\uffba\100\uffba\102\uffba\001\002\000\054\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\072\uffe7\074\uffe7" +
    "\075\uffe7\077\uffe7\100\uffe7\102\uffe7\103\uffe7\104\uffe7\001" +
    "\002\000\012\013\uffff\016\uffff\020\uffff\022\uffff\001\002" +
    "\000\012\015\015\017\021\021\020\023\016\001\002\000" +
    "\006\077\ufff7\102\ufff7\001\002\000\004\004\170\001\002" +
    "\000\004\071\171\001\002\000\020\004\027\007\031\033" +
    "\033\034\030\035\023\036\025\071\032\001\002\000\006" +
    "\072\201\100\200\001\002\000\006\072\ufff0\100\ufff0\001" +
    "\002\000\010\004\176\055\175\074\041\001\002\000\002" +
    "\001\002\000\006\072\uffef\100\uffef\001\002\000\012\072" +
    "\uffee\074\061\100\uffee\104\060\001\002\000\020\004\027" +
    "\007\031\033\033\034\030\035\023\036\025\071\032\001" +
    "\002\000\004\076\202\001\002\000\004\020\204\001\002" +
    "\000\004\077\311\001\002\000\004\076\205\001\002\000" +
    "\010\021\207\077\uffea\102\uffea\001\002\000\006\077\uffeb" +
    "\102\uffeb\001\002\000\020\004\027\007\031\033\033\034" +
    "\030\035\023\036\025\071\032\001\002\000\006\077\211" +
    "\102\212\001\002\000\004\013\214\001\002\000\004\021" +
    "\207\001\002\000\006\077\uffec\102\uffec\001\002\000\004" +
    "\076\215\001\002\000\020\027\226\032\216\042\233\043" +
    "\227\044\224\067\222\070\221\001\002\000\002\001\002" +
    "\000\004\102\uffc9\001\002\000\004\102\uffcd\001\002\000" +
    "\004\071\276\001\002\000\004\071\274\001\002\000\004" +
    "\102\uffce\001\002\000\004\004\257\001\002\000\004\102" +
    "\uffcf\001\002\000\002\001\002\000\004\071\250\001\002" +
    "\000\004\102\uffc8\001\002\000\004\102\uffca\001\002\000" +
    "\006\077\244\102\245\001\002\000\004\071\241\001\002" +
    "\000\010\074\061\103\237\104\060\001\002\000\004\102" +
    "\236\001\002\000\014\025\uffd0\026\uffd0\031\uffd0\077\uffd0" +
    "\102\uffd0\001\002\000\022\010\071\011\066\040\065\041" +
    "\076\045\074\065\063\071\075\073\101\001\002\000\004" +
    "\102\uffc7\001\002\000\002\001\002\000\010\072\243\074" +
    "\061\104\060\001\002\000\004\102\uffc6\001\002\000\004" +
    "\077\uffed\001\002\000\020\027\226\032\216\042\233\043" +
    "\227\044\224\067\222\070\221\001\002\000\004\102\247" +
    "\001\002\000\014\025\uffd1\026\uffd1\031\uffd1\077\uffd1\102" +
    "\uffd1\001\002\000\022\010\071\011\066\040\065\041\076" +
    "\045\074\065\063\071\075\073\101\001\002\000\004\072" +
    "\252\001\002\000\004\102\uffc5\001\002\000\004\030\254" +
    "\001\002\000\020\027\226\032\216\042\233\043\227\044" +
    "\224\067\222\070\221\001\002\000\006\031\256\102\245" +
    "\001\002\000\004\102\uffc2\001\002\000\004\071\260\001" +
    "\002\000\004\004\263\001\002\000\010\074\061\103\272" +
    "\104\060\001\002\000\006\072\uffbf\100\uffbf\001\002\000" +
    "\004\103\270\001\002\000\006\072\266\100\265\001\002" +
    "\000\004\004\263\001\002\000\004\102\uffc1\001\002\000" +
    "\006\072\uffc0\100\uffc0\001\002\000\022\010\071\011\066" +
    "\040\065\041\076\045\074\065\063\071\075\073\101\001" +
    "\002\000\006\072\uffbe\100\uffbe\001\002\000\022\010\071" +
    "\011\066\040\065\041\076\045\074\065\063\071\075\073" +
    "\101\001\002\000\006\072\uffbd\100\uffbd\001\002\000\004" +
    "\072\275\001\002\000\004\102\uffcc\001\002\000\004\072" +
    "\277\001\002\000\004\102\uffcb\001\002\000\004\024\301" +
    "\001\002\000\020\027\226\032\216\042\233\043\227\044" +
    "\224\067\222\070\221\001\002\000\010\025\304\026\303" +
    "\102\245\001\002\000\004\102\uffc4\001\002\000\020\027" +
    "\226\032\216\042\233\043\227\044\224\067\222\070\221" +
    "\001\002\000\006\026\306\102\245\001\002\000\004\102" +
    "\uffc3\001\002\000\004\074\041\001\002\000\012\074\061" +
    "\077\uffe9\102\uffe9\104\060\001\002\000\006\077\ufff2\102" +
    "\ufff2\001\002\000\006\072\ufff1\100\ufff1\001\002\000\004" +
    "\004\314\001\002\000\004\103\315\001\002\000\014\010" +
    "\071\011\066\040\065\041\076\073\101\001\002\000\006" +
    "\077\ufff5\102\ufff5\001\002\000\010\013\ufffa\020\326\022" +
    "\ufffa\001\002\000\004\076\321\001\002\000\012\015\015" +
    "\017\021\021\020\023\016\001\002\000\006\077\323\102" +
    "\165\001\002\000\004\102\324\001\002\000\010\013\ufffd" +
    "\020\ufffd\022\ufffd\001\002\000\006\013\ufff8\022\333\001" +
    "\002\000\004\076\327\001\002\000\012\015\015\017\021" +
    "\021\020\023\016\001\002\000\006\077\331\102\165\001" +
    "\002\000\004\102\332\001\002\000\006\013\ufffb\022\ufffb" +
    "\001\002\000\004\076\342\001\002\000\004\013\335\001" +
    "\002\000\004\076\336\001\002\000\020\027\226\032\216" +
    "\042\233\043\227\044\224\067\222\070\221\001\002\000" +
    "\006\077\340\102\245\001\002\000\004\077\341\001\002" +
    "\000\004\002\001\001\002\000\012\015\015\017\021\021" +
    "\020\023\016\001\002\000\006\077\344\102\165\001\002" +
    "\000\004\102\345\001\002\000\004\013\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\004\004\316\001" +
    "\001\000\002\001\001\000\006\007\016\010\021\001\001" +
    "\000\004\023\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\055\023\025\001\001\000\006\017\023" +
    "\023\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\033\022\034\023\025\001\001\000\002\001\001" +
    "\000\004\020\041\001\001\000\002\001\001\000\006\017" +
    "\037\023\025\001\001\000\002\001\001\000\004\020\041" +
    "\001\001\000\004\021\050\001\001\000\002\001\001\000" +
    "\004\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\056\020\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\072" +
    "\024\071\040\063\041\061\042\101\043\077\044\076\053" +
    "\067\054\066\001\001\000\010\045\146\046\145\047\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\072\024\071\044\142" +
    "\053\067\054\066\001\001\000\004\016\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\072\024\071\040\126\041\061\042" +
    "\101\043\077\044\076\053\067\054\066\001\001\000\002" +
    "\001\001\000\004\052\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\050\102\051\106\001\001\000\016" +
    "\016\072\024\071\043\110\044\076\053\067\054\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\072\024\071\043\107\044\076\053\067\054" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\072\024" +
    "\071\043\123\044\076\053\067\054\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\072\024\071\044\137\053\067" +
    "\054\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\072\024\071\042\161\043\077\044" +
    "\076\053\067\054\066\001\001\000\022\016\072\024\071" +
    "\041\160\042\101\043\077\044\076\053\067\054\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\072\024\071\042\157\043\077" +
    "\044\076\053\067\054\066\001\001\000\006\050\102\051" +
    "\106\001\001\000\006\046\145\047\156\001\001\000\006" +
    "\050\102\051\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\171\012\172\017" +
    "\173\023\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\041\001\001\000\004\016\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\311\017\173" +
    "\023\025\001\001\000\002\001\001\000\004\013\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\207" +
    "\015\205\001\001\000\002\001\001\000\006\017\306\023" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\233\025\231\026\234\027\224\030\222\031\217" +
    "\032\230\033\216\034\227\001\001\000\004\037\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\072\024\071\040\237\041\061\042" +
    "\101\043\077\044\076\053\067\054\066\001\001\000\002" +
    "\001\001\000\004\016\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\233\026\245" +
    "\027\224\030\222\031\217\032\230\033\216\034\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\072" +
    "\024\071\040\250\041\061\042\101\043\077\044\076\053" +
    "\067\054\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\233\025\254\026\234\027" +
    "\224\030\222\031\217\032\230\033\216\034\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\260\035\263\036\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\260\036\266\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\072\024\071\040\270\041\061\042" +
    "\101\043\077\044\076\053\067\054\066\001\001\000\002" +
    "\001\001\000\024\016\072\024\071\040\272\041\061\042" +
    "\101\043\077\044\076\053\067\054\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\233" +
    "\025\301\026\234\027\224\030\222\031\217\032\230\033" +
    "\216\034\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\233\025\304\026\234\027\224\030\222\031" +
    "\217\032\230\033\216\034\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\307\020\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\315\001\001\000" +
    "\002\001\001\000\004\005\324\001\001\000\002\001\001" +
    "\000\006\007\321\010\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\333\001\001" +
    "\000\002\001\001\000\006\007\327\010\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\233\025\336\026\234\027\224\030\222\031\217\032\230" +
    "\033\216\034\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\342\010\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


   private EAtribucion atrb = new EAtribucion();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Op42 ::= not 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op42R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op42",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Op41 ::= PABIERTO float PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op41R4()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Op41 ::= PABIERTO nat PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op41R3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Op41 ::= PABIERTO int PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op41R2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Op41 ::= PABIERTO char PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op41R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op3 ::= DESPDER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op3R2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Op3 ::= DESPIZQ 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op3R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Op2 ::= MOD 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op2R3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Op2 ::= DIV 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op2R2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Op2 ::= MULT 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op2R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Op1 ::= RESTA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op1R2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op1 ::= SUMA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op1R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op0 ::= DISTINTO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R6()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op0 ::= IGUALIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R5()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op0 ::= MAYORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R4()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op0 ::= MENORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Op0 ::= MAYOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op0 ::= MENOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op0R1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Exp3 ::= PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp3R5(exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp3 ::= Valores 
            {
              TAtributos RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp3R4(valores)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp3 ::= Designador 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp3R4(desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp3 ::= RESTA PABIERTO Exp3 PCERRADO 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp3R3(exp3)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp3 ::= Op42 Exp3 
            {
              TAtributos RESULT =null;
		int op42left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op42right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op42 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp3R2(op42,exp3)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp3 ::= Op41 Designador 
            {
              TAtributos RESULT =null;
		int op41left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op41right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op41 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp3R1(op41,desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp2 ::= Exp3 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp2R2(exp3)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp2 ::= Exp3 Op3 Exp2 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp2R1(exp3,op3,exp2)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp1 ::= Exp2 
            {
              TAtributos RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp1R2(exp2)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= Exp1 AND1 Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp1R1(exp1,exp2)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp1 ::= Exp1 Op2 Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp1R1(exp1,op2,exp2)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp0 ::= Exp1 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp0R3(exp1)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp0 ::= Exp0 OR Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp0R2(exp0,exp1)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp0 ::= Exp0 Op1 Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp0R1(exp0,op1,exp1)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp ::= Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ExpR2(exp01)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= Exp0 Op0 Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp02left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp02right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp02 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ExpR1(exp01,op0,exp02)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Parametro ::= Designador IGUAL Exp 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ParametroR2(desig,exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Parametro ::= ident IGUAL Exp 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ParametroR1(id,exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametro",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Parametros ::= Parametro 
            {
              TAtributos RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ParametrosR2(parametro)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Parametros ::= Parametros COMA Parametro 
            {
              TAtributos RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.ParametrosR1(parametros,parametro)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA ::= Call ident PABIERTO Parametros PCERRADO 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.LLAMADAR1(id,parametros)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= while ExpBool do Insts endwhile 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.WHILER1(expbool,insts)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= if ExpBool then Insts else Insts endif 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int insts1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int insts1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.IFR1(expbool,insts1,insts2) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= if ExpBool then Insts endif 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.IFR1(expbool,insts) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsW ::= out PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsWR1(exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsW",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsR ::= in PABIERTO Designador PCERRADO 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsRR1(desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsAsig ::= Designador IGUAL Exp 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InsAsigR1(desig,exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsAsig",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Inst ::= LLAMADA 
            {
              TAtributos RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos llamada = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR8(llamada)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Inst ::= WHILE 
            {
              TAtributos RESULT =null;
		int whileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos while = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR7(while)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Inst ::= IF 
            {
              TAtributos RESULT =null;
		int ifleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos if = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR6(if)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Inst ::= SWAP2 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.InstR5()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Inst ::= SWAP1 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.InstR4()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Inst ::= InsW 
            {
              TAtributos RESULT =null;
		int inswleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inswright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insw = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR3(insw)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Inst ::= InsR 
            {
              TAtributos RESULT =null;
		int insrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insr = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR2(insr)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Inst ::= InsAsig 
            {
              TAtributos RESULT =null;
		int insasigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insasigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insasig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InstR1(insasig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Insts ::= Inst PYC 
            {
              TAtributos RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InstsR2(inst)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Insts ::= Insts PYC Inst PYC 
            {
              TAtributos RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InstsR1(insts,inst)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Valores ::= false 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR6()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Valores ::= true 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR5()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Valores ::= COMILLA PABIERTO digito PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR4()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Valores ::= COMILLA PABIERTO letra PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores ::= numeroEnt 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores ::= numeroReal 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ValoresR1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TipoBasico ::= caracter 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasicoR5()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoBasico ::= float 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasicoR4()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoBasico ::= natural 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasicoR3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoBasico ::= integer 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasicoR2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoBasico ::= boolean 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasicoR1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TiposTupla ::= Tipo 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.tiposTuplaR2(tipo) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposTupla ::= TiposTupla COMA Tipo 
            {
              TAtributos RESULT =null;
		int tipostuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipostuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipostupla = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.tiposTuplaR1(tipostupla,tipo) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Componente ::= ident 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.componenteR2(id) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Componente ::= numero 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.componenteR1() 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Dimensiones ::= CABIERTO Componente CCERRADO 
            {
              TAtributos RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos comp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.dimensionesR2(comp) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dimensiones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Dimensiones ::= Dimensiones CABIERTO Componente CCERRADO 
            {
              TAtributos RESULT =null;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos dim = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos comp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.dimensionesR1(dim,comp) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dimensiones",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= PABIERTO TiposTupla PCERRADO 
            {
              TAtributos RESULT =null;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.TipoR4(tipos) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= Tipo Dimensiones PYC 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos dim = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.TipoR3(tipo,dim) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= ident PYC 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.TipoR2(id) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Tipo ::= TipoBasico PYC 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.TipoR1(tipobasico) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Designador ::= Designador GUIONBAJO numero 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.designadorR3()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Designador ::= Designador CABIERTO Exp CCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.designadorR2(exp)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecSub ::= var Tipo Designador 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecSubR1(tipo,desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecSub",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecsSubs ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.DecsSubsR1()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecsSubs ::= DecSub 
            {
              TAtributos RESULT =null;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubsR2(decsub)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecsSubs ::= DecsSubs PYC DecSub 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubsR1(decssubs,decsub)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CS ::= vars LLABIERTA DecsSubs LLCERRADA instructions LLABIERTA Insts LLCERRADA 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.CSR1(decssubs,insts) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PF ::= Tipo MULT Designador 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFR2(tipo,desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PF ::= Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFR1(tipo,id)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PFs ::= PF 
            {
              TAtributos RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFsR2(pf)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PFs ::= PFs COMA PF 
            {
              TAtributos RESULT =null;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFsR1(pfs,pf)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dec ::= subprogram DP ident PABIERTO PFs PCERRADO LLABIERTA CS LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos cs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = atrb.DecR4(id,pfs,cs) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dec ::= var Tipo Designador 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecR3(tipo,desig)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Dec ::= tipo Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecR2(tipo,id)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec ::= const TipoBasico ident IGUAL Valores 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecR1(tipobasico,id,Valores) 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decs ::= Dec 
            {
              TAtributos RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsR2(dec)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decs ::= Decs PYC Dec 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsR1(decs,dec)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Subprogramas ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.SubprogramasR2(subprograma)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Subprogramas ::= subprograms LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.SubprogramasR1(decs)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Vars ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.VarsR2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Vars ::= vars LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.VarsR1(decs)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipos ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TiposR2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Tipos ::= tipos LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.TiposR1(decs)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Consts ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.ConstsR2()
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Consts ::= consts LLABIERTA Decs LLCERRADA 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.ConstsR1(decs)
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos start_val = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= program DP ident LLABIERTA Consts Tipos Vars Subprogramas instructions LLABIERTA Insts LLCERRADA LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TAtributos consts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TAtributos vars = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int subprogramasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int subprogramasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos subprogramas = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.ProgramaR1( id,consts,tipos,vars,subprogramas,insts )
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

