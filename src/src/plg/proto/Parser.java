
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 07 17:23:14 CEST 2013
//----------------------------------------------------

package src.plg.proto;

import java_cup.runtime.*;
import src.es.ucm.fdi.plg.evlib.TAtributos;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 07 17:23:14 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\017\000\002\002\004\000\002\003" +
    "\006\000\002\003\002\000\002\004\007\000\002\004\002" +
    "\000\002\005\007\000\002\005\002\000\002\006\007\000" +
    "\002\006\002\000\002\007\005\000\002\007\003\000\002" +
    "\010\007\000\002\010\005\000\002\010\005\000\002\010" +
    "\013\000\002\011\005\000\002\011\003\000\002\012\004" +
    "\000\002\012\005\000\002\013\012\000\002\014\005\000" +
    "\002\014\003\000\002\014\002\000\002\015\005\000\002" +
    "\016\003\000\002\016\006\000\002\016\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\007\000\002\017\005" +
    "\000\002\020\003\000\002\020\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\007" +
    "\000\002\023\007\000\002\023\003\000\002\023\003\000" +
    "\002\024\006\000\002\024\004\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\005\000\002\027\006\000\002\030\006\000" +
    "\002\031\007\000\002\031\011\000\002\032\007\000\002" +
    "\033\007\000\002\034\005\000\002\034\003\000\002\035" +
    "\005\000\002\037\005\000\002\037\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\041\005\000" +
    "\002\041\005\000\002\041\003\000\002\042\005\000\002" +
    "\042\003\000\002\043\004\000\002\043\004\000\002\043" +
    "\006\000\002\043\003\000\002\043\003\000\002\043\005" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\045\003\000\002\045\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\014\004\001\002\000\004\071\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\004\010\001\002\000\004\101\011\001\002\000" +
    "\014\015\ufffe\016\013\020\ufffe\022\ufffe\024\ufffe\001\002" +
    "\000\012\015\ufffc\020\313\022\ufffc\024\ufffc\001\002\000" +
    "\004\101\014\001\002\000\012\017\016\021\022\023\015" +
    "\025\020\001\002\000\020\004\027\007\032\035\025\036" +
    "\024\037\030\040\033\074\031\001\002\000\014\007\032" +
    "\035\025\036\024\037\030\040\033\001\002\000\006\102" +
    "\301\105\302\001\002\000\004\071\052\001\002\000\006" +
    "\102\ufff6\105\ufff6\001\002\000\020\004\027\007\032\035" +
    "\025\036\024\037\030\040\033\074\031\001\002\000\006" +
    "\004\051\077\036\001\002\000\006\004\uffdc\105\uffdc\001" +
    "\002\000\006\004\uffdd\105\uffdd\001\002\000\004\105\050" +
    "\001\002\000\004\105\047\001\002\000\006\004\uffdb\105" +
    "\uffdb\001\002\000\020\004\027\007\032\035\025\036\024" +
    "\037\030\040\033\074\031\001\002\000\006\004\uffd9\105" +
    "\uffd9\001\002\000\006\004\uffda\105\uffda\001\002\000\006" +
    "\075\045\103\044\001\002\000\010\075\uffde\077\036\103" +
    "\uffde\001\002\000\006\004\041\013\037\001\002\000\004" +
    "\100\uffe1\001\002\000\004\100\042\001\002\000\004\100" +
    "\uffe0\001\002\000\004\105\043\001\002\000\014\004\uffe3" +
    "\060\uffe3\075\uffe3\077\uffe3\103\uffe3\001\002\000\020\004" +
    "\027\007\032\035\025\036\024\037\030\040\033\074\031" +
    "\001\002\000\014\004\uffe2\060\uffe2\075\uffe2\077\uffe2\103" +
    "\uffe2\001\002\000\010\075\uffdf\077\036\103\uffdf\001\002" +
    "\000\014\004\uffe4\060\uffe4\075\uffe4\077\uffe4\103\uffe4\001" +
    "\002\000\014\004\uffe5\060\uffe5\075\uffe5\077\uffe5\103\uffe5" +
    "\001\002\000\006\102\ufff4\105\ufff4\001\002\000\004\004" +
    "\053\001\002\000\004\074\054\001\002\000\020\004\027" +
    "\007\032\035\025\036\024\037\030\040\033\074\031\001" +
    "\002\000\006\075\064\103\063\001\002\000\006\075\ufff0" +
    "\103\ufff0\001\002\000\010\004\061\060\060\077\036\001" +
    "\002\000\004\004\062\001\002\000\006\075\uffef\103\uffef" +
    "\001\002\000\006\075\uffee\103\uffee\001\002\000\020\004" +
    "\027\007\032\035\025\036\024\037\030\040\033\074\031" +
    "\001\002\000\004\101\065\001\002\000\004\022\066\001" +
    "\002\000\004\101\071\001\002\000\004\102\070\001\002" +
    "\000\006\102\ufff2\105\ufff2\001\002\000\010\023\073\102" +
    "\uffea\105\uffea\001\002\000\006\102\uffeb\105\uffeb\001\002" +
    "\000\020\004\027\007\032\035\025\036\024\037\030\040" +
    "\033\074\031\001\002\000\006\102\075\105\076\001\002" +
    "\000\004\015\100\001\002\000\004\023\073\001\002\000" +
    "\006\102\uffec\105\uffec\001\002\000\004\101\101\001\002" +
    "\000\022\004\114\031\102\034\115\043\120\044\112\045" +
    "\110\072\106\073\104\001\002\000\026\004\114\010\133" +
    "\011\136\012\127\041\130\042\137\050\146\070\126\074" +
    "\143\076\135\001\002\000\004\105\uffcd\001\002\000\004" +
    "\074\270\001\002\000\004\105\uffc9\001\002\000\004\074" +
    "\266\001\002\000\004\105\uffce\001\002\000\004\004\254" +
    "\001\002\000\004\105\uffcf\001\002\000\004\074\251\001" +
    "\002\000\004\105\uffc8\001\002\000\060\032\uffe8\046\uffe8" +
    "\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\075\uffe8\077\245\100\uffe8\103\uffe8\105\uffe8\106" +
    "\uffe8\107\244\001\002\000\002\001\002\000\006\102\231" +
    "\105\232\001\002\000\004\105\uffca\001\002\000\004\074" +
    "\226\001\002\000\004\106\124\001\002\000\004\105\123" +
    "\001\002\000\014\027\uffd0\030\uffd0\033\uffd0\102\uffd0\105" +
    "\uffd0\001\002\000\026\004\114\010\133\011\136\012\127" +
    "\041\130\042\137\050\146\070\126\074\143\076\135\001" +
    "\002\000\052\032\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\075\uffb0\100\uffb0" +
    "\103\uffb0\105\uffb0\001\002\000\026\004\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\041\uff9c\042\uff9c\050\uff9c\070\uff9c\074\uff9c" +
    "\076\uff9c\001\002\000\054\032\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\075" +
    "\uffd8\100\uffd8\102\uffd8\103\uffd8\105\uffd8\001\002\000\054" +
    "\032\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\075\uffd3\100\uffd3\102\uffd3\103" +
    "\uffd3\105\uffd3\001\002\000\026\004\114\010\133\011\136" +
    "\012\127\041\130\042\137\050\146\070\126\074\143\076" +
    "\135\001\002\000\004\004\114\001\002\000\054\032\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\075\uffd7\100\uffd7\102\uffd7\103\uffd7\105" +
    "\uffd7\001\002\000\004\105\uffc7\001\002\000\004\074\215" +
    "\001\002\000\054\032\uffd6\046\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\075\uffd6\100" +
    "\uffd6\102\uffd6\103\uffd6\105\uffd6\001\002\000\054\032\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\075\uffd2\100\uffd2\102\uffd2\103\uffd2\105" +
    "\uffd2\001\002\000\052\032\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\212\064\211\075\uffb4" +
    "\100\uffb4\103\uffb4\105\uffb4\001\002\000\046\032\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6" +
    "\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\075" +
    "\uffb6\100\uffb6\103\uffb6\105\uffb6\001\002\000\046\032\uffb9" +
    "\046\uffb9\047\171\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054" +
    "\uffb9\055\uffb9\056\uffb9\057\uffb9\060\170\061\172\062\167" +
    "\075\uffb9\100\uffb9\103\uffb9\105\uffb9\001\002\000\036\004" +
    "\114\010\133\011\136\012\127\040\202\041\130\042\137" +
    "\050\146\065\200\066\177\067\201\070\126\074\143\076" +
    "\135\001\002\000\036\032\uffbc\046\164\050\163\051\160" +
    "\052\155\053\152\054\157\055\161\056\162\057\156\075" +
    "\uffbc\100\uffbc\103\uffbc\105\uffbc\001\002\000\052\032\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\075\uffaf\100\uffaf\103\uffaf\105\uffaf\001" +
    "\002\000\004\074\147\001\002\000\026\004\114\010\133" +
    "\011\136\012\127\041\130\042\137\050\146\070\126\074" +
    "\143\076\135\001\002\000\004\075\151\001\002\000\052" +
    "\032\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\075\uffb1\100\uffb1\103\uffb1\105" +
    "\uffb1\001\002\000\026\004\uffab\010\uffab\011\uffab\012\uffab" +
    "\041\uffab\042\uffab\050\uffab\070\uffab\074\uffab\076\uffab\001" +
    "\002\000\026\004\114\010\133\011\136\012\127\041\130" +
    "\042\137\050\146\070\126\074\143\076\135\001\002\000" +
    "\026\004\114\010\133\011\136\012\127\041\130\042\137" +
    "\050\146\070\126\074\143\076\135\001\002\000\026\004" +
    "\uffad\010\uffad\011\uffad\012\uffad\041\uffad\042\uffad\050\uffad" +
    "\070\uffad\074\uffad\076\uffad\001\002\000\026\004\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\041\uffa7\042\uffa7\050\uffa7\070\uffa7" +
    "\074\uffa7\076\uffa7\001\002\000\026\004\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\041\uffaa\042\uffaa\050\uffaa\070\uffaa\074\uffaa" +
    "\076\uffaa\001\002\000\026\004\uffac\010\uffac\011\uffac\012" +
    "\uffac\041\uffac\042\uffac\050\uffac\070\uffac\074\uffac\076\uffac" +
    "\001\002\000\026\004\uffa9\010\uffa9\011\uffa9\012\uffa9\041" +
    "\uffa9\042\uffa9\050\uffa9\070\uffa9\074\uffa9\076\uffa9\001\002" +
    "\000\026\004\uffa8\010\uffa8\011\uffa8\012\uffa8\041\uffa8\042" +
    "\uffa8\050\uffa8\070\uffa8\074\uffa8\076\uffa8\001\002\000\026" +
    "\004\uffa6\010\uffa6\011\uffa6\012\uffa6\041\uffa6\042\uffa6\050" +
    "\uffa6\070\uffa6\074\uffa6\076\uffa6\001\002\000\026\004\114" +
    "\010\133\011\136\012\127\041\130\042\137\050\146\070" +
    "\126\074\143\076\135\001\002\000\046\032\uffba\046\uffba" +
    "\047\171\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\057\uffba\060\170\061\172\062\167\075\uffba" +
    "\100\uffba\103\uffba\105\uffba\001\002\000\026\004\114\010" +
    "\133\011\136\012\127\041\130\042\137\050\146\070\126" +
    "\074\143\076\135\001\002\000\026\004\uffa3\010\uffa3\011" +
    "\uffa3\012\uffa3\041\uffa3\042\uffa3\050\uffa3\070\uffa3\074\uffa3" +
    "\076\uffa3\001\002\000\026\004\uffa5\010\uffa5\011\uffa5\012" +
    "\uffa5\041\uffa5\042\uffa5\050\uffa5\070\uffa5\074\uffa5\076\uffa5" +
    "\001\002\000\026\004\114\010\133\011\136\012\127\041" +
    "\130\042\137\050\146\070\126\074\143\076\135\001\002" +
    "\000\026\004\uffa4\010\uffa4\011\uffa4\012\uffa4\041\uffa4\042" +
    "\uffa4\050\uffa4\070\uffa4\074\uffa4\076\uffa4\001\002\000\046" +
    "\032\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\075\uffb7\100\uffb7\103\uffb7\105\uffb7\001\002\000" +
    "\046\032\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061" +
    "\uffb8\062\uffb8\075\uffb8\100\uffb8\103\uffb8\105\uffb8\001\002" +
    "\000\022\032\uffbd\046\164\050\163\057\156\075\uffbd\100" +
    "\uffbd\103\uffbd\105\uffbd\001\002\000\046\032\uffbb\046\uffbb" +
    "\047\171\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\170\061\172\062\167\075\uffbb" +
    "\100\uffbb\103\uffbb\105\uffbb\001\002\000\004\075\210\001" +
    "\002\000\004\075\207\001\002\000\004\075\206\001\002" +
    "\000\004\075\205\001\002\000\004\075\204\001\002\000" +
    "\052\032\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061" +
    "\uffae\062\uffae\063\uffae\064\uffae\075\uffae\100\uffae\103\uffae" +
    "\105\uffae\001\002\000\004\004\uff9d\001\002\000\004\004" +
    "\uff9e\001\002\000\004\004\uffa0\001\002\000\004\004\uff9f" +
    "\001\002\000\026\004\uffa1\010\uffa1\011\uffa1\012\uffa1\041" +
    "\uffa1\042\uffa1\050\uffa1\070\uffa1\074\uffa1\076\uffa1\001\002" +
    "\000\026\004\uffa2\010\uffa2\011\uffa2\012\uffa2\041\uffa2\042" +
    "\uffa2\050\uffa2\070\uffa2\074\uffa2\076\uffa2\001\002\000\026" +
    "\004\114\010\133\011\136\012\127\041\130\042\137\050" +
    "\146\070\126\074\143\076\135\001\002\000\046\032\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5" +
    "\075\uffb5\100\uffb5\103\uffb5\105\uffb5\001\002\000\006\005" +
    "\216\006\217\001\002\000\004\075\222\001\002\000\004" +
    "\075\220\001\002\000\004\076\221\001\002\000\054\032" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\075\uffd4\100\uffd4\102\uffd4\103\uffd4" +
    "\105\uffd4\001\002\000\004\076\223\001\002\000\054\032" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\075\uffd5\100\uffd5\102\uffd5\103\uffd5" +
    "\105\uffd5\001\002\000\052\032\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\075" +
    "\uffb3\100\uffb3\103\uffb3\105\uffb3\001\002\000\052\032\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\075\uffb2\100\uffb2\103\uffb2\105\uffb2\001" +
    "\002\000\026\004\114\010\133\011\136\012\127\041\130" +
    "\042\137\050\146\070\126\074\143\076\135\001\002\000" +
    "\004\075\230\001\002\000\004\105\uffc6\001\002\000\004" +
    "\102\uffed\001\002\000\022\004\114\031\102\034\115\043" +
    "\120\044\112\045\110\072\106\073\104\001\002\000\004" +
    "\105\234\001\002\000\014\027\uffd1\030\uffd1\033\uffd1\102" +
    "\uffd1\105\uffd1\001\002\000\004\026\236\001\002\000\022" +
    "\004\114\031\102\034\115\043\120\044\112\045\110\072" +
    "\106\073\104\001\002\000\010\027\240\030\241\105\232" +
    "\001\002\000\022\004\114\031\102\034\115\043\120\044" +
    "\112\045\110\072\106\073\104\001\002\000\004\105\uffc4" +
    "\001\002\000\006\030\243\105\232\001\002\000\004\105" +
    "\uffc3\001\002\000\004\013\250\001\002\000\026\004\114" +
    "\010\133\011\136\012\127\041\130\042\137\050\146\070" +
    "\126\074\143\076\135\001\002\000\004\100\247\001\002" +
    "\000\054\032\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\075\uffe7\100\uffe7\103" +
    "\uffe7\105\uffe7\106\uffe7\001\002\000\054\032\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\075\uffe6\100\uffe6\103\uffe6\105\uffe6\106\uffe6\001" +
    "\002\000\026\004\114\010\133\011\136\012\127\041\130" +
    "\042\137\050\146\070\126\074\143\076\135\001\002\000" +
    "\004\075\253\001\002\000\004\105\uffc5\001\002\000\004" +
    "\074\255\001\002\000\004\004\257\001\002\000\006\075" +
    "\uffbf\103\uffbf\001\002\000\004\106\264\001\002\000\006" +
    "\075\262\103\261\001\002\000\004\004\257\001\002\000" +
    "\004\105\uffc1\001\002\000\006\075\uffc0\103\uffc0\001\002" +
    "\000\026\004\114\010\133\011\136\012\127\041\130\042" +
    "\137\050\146\070\126\074\143\076\135\001\002\000\006" +
    "\075\uffbe\103\uffbe\001\002\000\004\075\267\001\002\000" +
    "\004\105\uffcc\001\002\000\004\075\271\001\002\000\004" +
    "\105\uffcb\001\002\000\004\032\273\001\002\000\022\004" +
    "\114\031\102\034\115\043\120\044\112\045\110\072\106" +
    "\073\104\001\002\000\006\033\275\105\232\001\002\000" +
    "\004\105\uffc2\001\002\000\006\004\277\077\036\001\002" +
    "\000\006\102\uffe9\105\uffe9\001\002\000\006\075\ufff1\103" +
    "\ufff1\001\002\000\012\015\uffff\020\uffff\022\uffff\024\uffff" +
    "\001\002\000\012\017\016\021\022\023\015\025\020\001" +
    "\002\000\006\102\ufff7\105\ufff7\001\002\000\004\004\305" +
    "\001\002\000\004\106\306\001\002\000\016\010\133\011" +
    "\136\012\127\041\130\042\137\076\135\001\002\000\006" +
    "\102\ufff5\105\ufff5\001\002\000\006\004\311\077\036\001" +
    "\002\000\006\102\ufff3\105\ufff3\001\002\000\010\015\ufffa" +
    "\022\320\024\ufffa\001\002\000\004\101\314\001\002\000" +
    "\012\017\016\021\022\023\015\025\020\001\002\000\006" +
    "\102\316\105\302\001\002\000\004\105\317\001\002\000" +
    "\010\015\ufffd\022\ufffd\024\ufffd\001\002\000\004\101\335" +
    "\001\002\000\006\015\ufff8\024\323\001\002\000\004\015" +
    "\330\001\002\000\004\101\324\001\002\000\012\017\016" +
    "\021\022\023\015\025\020\001\002\000\006\102\326\105" +
    "\302\001\002\000\004\105\327\001\002\000\004\015\ufff9" +
    "\001\002\000\004\101\331\001\002\000\022\004\114\031" +
    "\102\034\115\043\120\044\112\045\110\072\106\073\104" +
    "\001\002\000\006\102\333\105\232\001\002\000\004\102" +
    "\334\001\002\000\004\002\001\001\002\000\012\017\016" +
    "\021\022\023\015\025\020\001\002\000\006\102\337\105" +
    "\302\001\002\000\004\105\340\001\002\000\006\015\ufffb" +
    "\024\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\004\004\311\001" +
    "\001\000\002\001\001\000\006\007\016\010\020\001\001" +
    "\000\006\017\307\022\025\001\001\000\004\022\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\022\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\034\021\033\022" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\045\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\054\012\055\017\056\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\277\017\056\022\025\001\001\000\002\001" +
    "\001\000\004\013\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\073\015\071\001" +
    "\001\000\002\001\001\000\006\017\275\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\120" +
    "\024\115\025\121\026\110\027\106\030\102\031\116\032" +
    "\104\033\112\001\001\000\024\016\124\023\144\037\271" +
    "\040\143\041\141\042\140\043\137\050\131\051\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\124\023\144\037" +
    "\133\040\143\041\141\042\140\043\137\050\131\051\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\124\023\144\043\224" +
    "\050\131\051\130\001\001\000\004\016\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\212\001\001\000" +
    "\002\001\001\000\004\046\165\001\001\000\024\016\124" +
    "\023\144\037\202\040\143\041\141\042\140\043\137\050" +
    "\131\051\130\001\001\000\006\044\153\045\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\124\023" +
    "\144\043\147\050\131\051\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\124\023" +
    "\144\041\175\042\140\043\137\050\131\051\130\001\001" +
    "\000\022\016\124\023\144\040\174\041\141\042\140\043" +
    "\137\050\131\051\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\124" +
    "\023\144\041\164\042\140\043\137\050\131\051\130\001" +
    "\001\000\004\046\165\001\001\000\016\016\124\023\144" +
    "\042\173\043\137\050\131\051\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\124\023\144\042\172" +
    "\043\137\050\131\051\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\152\001\001" +
    "\000\004\046\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\016\124\023\144\042\213\043\137\050" +
    "\131\051\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\124\023\144\037" +
    "\226\040\143\041\141\042\140\043\137\050\131\051\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\120\025\232\026\110\027\106\030\102" +
    "\031\116\032\104\033\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\120\024\236" +
    "\025\121\026\110\027\106\030\102\031\116\032\104\033" +
    "\112\001\001\000\002\001\001\000\024\016\120\024\241" +
    "\025\121\026\110\027\106\030\102\031\116\032\104\033" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\016\124\023\144\037" +
    "\245\040\143\041\141\042\140\043\137\050\131\051\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\124\023\144\037\251\040\143\041\141" +
    "\042\140\043\137\050\131\051\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\257" +
    "\035\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\124\023\144\037\264\040" +
    "\143\041\141\042\140\043\137\050\131\051\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\120\024\273\025\121\026\110\027\106\030\102\031" +
    "\116\032\104\033\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\302\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\306\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\320\001\001\000\002\001\001\000" +
    "\006\007\314\010\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\324\010\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\120" +
    "\024\331\025\121\026\110\027\106\030\102\031\116\032" +
    "\104\033\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\335\010\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol cur_token) {
        String possibleSymbols = "";
        int i;
        if(0 < action_table()[((Symbol)stack.peek()).parse_state].length-2) 
			possibleSymbols = getSymbol(action_table()[((Symbol)stack.peek()).parse_state][0]);
			
        for (i=2; i < action_table()[((Symbol)stack.peek()).parse_state].length-2; i += 2)
            possibleSymbols += " ," + getSymbol(action_table()[((Symbol)stack.peek()).parse_state][i]);
            
        if(cur_token.sym!=0) 
        	System.err.println("Syntax error occurs in line " + cur_token.left + ": " + possibleSymbols + " was expected");
        else 
        	System.err.println("End of file founded, " + possibleSymbols + " was expected.");
        	
        System.exit(-1);
	}
	
	public String getSymbol(int i){
    	switch(i){
        	case  3 : {return "carácter";}
        	case  4 : {return "real";}
        	case  5 : {return "natural";}
        	case  6 : {return "program";}
        	case  7 : {return "consts";}
        	case  8 : {return "const";}
        	case  9 : {return "tipos";}
        	case  10 : {return "tipo";}
        	case  11 : {return "vars";}
        	case  12 : {return "var";}
        	case  13 : {return "subprograms";}
        	case  14 : {return "subprogram";}
        	case  15 : {return "instructions";}
        	case  16 : {return "+";}
        	case  17 : {return "-";}
        	case  18 : {return "/";}
        	case  19 : {return "*";}
        	case  20 : {return "%";}
        	case  21 : {return ">";}
        	case  22 : {return "<";}
        	case  23 : {return ">=";}
        	case  24 : {return "<=";}
        	case  25 : {return "==";}
        	case  26 : {return "!=";}
        	case  27 : {return "!";}
        	case  28 : {return "and";}
        	case  29 : {return "or";}
        	case  30 : {return "<<";}
        	case  31 : {return ">>";}
        	case  32 : {return "(";}
        	case  33 : {return ")";}
        	case  34 : {return "{";}
        	case  35 : {return "}";}
        	case  36 : {return "[";}
        	case  37 : {return "]";}
        	case  38 : {return ";";}
        	case  39 : {return ":";}
        	case  40 : {return ":=";}
        	case  41 : {return "=";}
        	case  42 : {return ",";}
        	case  43 : {return "@";}
        	case  44 : {return "_";}
        	case  45 : {return "in";}
        	case  46 : {return "out";}
        	case  47 : {return "swap1";}
        	case  48 : {return "swap2";}
        	case  49 : {return "call";}
        	case  50 : {return "if";}
        	case  51 : {return "then";}
        	case  52 : {return "else";}
        	case  53 : {return "endif";}
        	case  54 : {return "while";}
        	case  55 : {return "do";}
        	case  56 : {return "endwhile";}
        	case  57 : {return "float";}
        	case  58 : {return "integer";}
        	case  59 : {return "natural";}
        	case  60 : {return "character";}
        	case  61 : {return "boolean";}
        	case  62 : {return "true";}
        	case  63 : {return "false";}
        	case  64 : {return "int";}
        	case  65 : {return "nat";}
        	case  66 : {return "char";}
            default: return "";
    	}
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


   private EAtribucion atrb = new EAtribucion();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Op42 ::= not 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op420(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op42",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Op41 ::= PABIERTO FLOAT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op413(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Op41 ::= PABIERTO NAT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op412(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Op41 ::= PABIERTO INT PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op411(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Op41 ::= PABIERTO CHAR PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op410(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op41",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Op3 ::= DESPDER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op31(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Op3 ::= DESPIZQ 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op30(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op3",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Op2 ::= MOD 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op22(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Op2 ::= DIV 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op21(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Op2 ::= MULT 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op20(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op2",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Op1 ::= RESTA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op11(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Op1 ::= SUMA 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op10(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Op0 ::= DISTINTO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op05(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Op0 ::= IGUALIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op04(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Op0 ::= MAYORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op03(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Op0 ::= MENORIGUAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op02(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Op0 ::= MAYOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op01(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Op0 ::= MENOR 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Op00(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Op0",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Exp3 ::= PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp35(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Exp3 ::= Valores 
            {
              TAtributos RESULT =null;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp34(valores); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Exp3 ::= Designador 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp33(desig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Exp3 ::= RESTA PABIERTO Exp3 PCERRADO 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Exp32(exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Exp3 ::= Op42 Exp3 
            {
              TAtributos RESULT =null;
		int op42left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op42right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op42 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp31(op42,exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp3 ::= Op41 Designador 
            {
              TAtributos RESULT =null;
		int op41left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op41right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op41 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp30(op41,desig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp3",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp2 ::= Exp3 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp21(exp3); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp2 ::= Exp3 Op3 Exp2 
            {
              TAtributos RESULT =null;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op3 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp20(exp3,op3,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp2",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp1 ::= Exp2 
            {
              TAtributos RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp12(exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp1 ::= Exp1 AND Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp11(exp1,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp1 ::= Exp1 Op2 Exp2 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp10(exp1,op2,exp2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp0 ::= Exp1 
            {
              TAtributos RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp02(exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp0 ::= Exp0 OR Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp01(exp0,exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp0 ::= Exp0 Op1 Exp1 
            {
              TAtributos RESULT =null;
		int exp0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp00(exp0,op1,exp1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp0",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp1(exp01); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp ::= Exp0 Op0 Exp0 
            {
              TAtributos RESULT =null;
		int exp01left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp01right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos exp01 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int op0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos op0 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp02left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp02right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp02 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Exp0(exp01,op0,exp02); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Parametro ::= ident IGUAL Exp 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametro0(id,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametro",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Parametros ::= Parametro 
            {
              TAtributos RESULT =null;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametros1(parametro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Parametros ::= Parametros COMA Parametro 
            {
              TAtributos RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parametroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parametroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos parametro = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Parametros0(parametros,parametro); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA ::= Call ident PABIERTO Parametros PCERRADO 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos parametros = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Llamada0(id,parametros); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpWHILE ::= WHILE Exp DO Insts ENDWHILE 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.While0(exp,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpWHILE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpIF ::= IF ExpBool THEN Insts ELSE Insts ENDIF 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int insts1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int insts1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts1 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int insts2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insts2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts2 = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.If1(expbool,insts1,insts2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIF",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpIF ::= IF ExpBool THEN Insts ENDIF 
            {
              TAtributos RESULT =null;
		int expboolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expboolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos expbool = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.If0(expbool,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIF",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InsW ::= out PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsW(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsW",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InsR ::= in PABIERTO Exp PCERRADO 
            {
              TAtributos RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.InsR(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InsAsig ::= Designador IGUAL Exp 
            {
              TAtributos RESULT =null;
		int desigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int desigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos desig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.InsAsig(desig,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("InsAsig",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Inst ::= LLAMADA 
            {
              TAtributos RESULT =null;
		int llamadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int llamadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos llamada = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst7(llamada); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Inst ::= ExpWHILE 
            {
              TAtributos RESULT =null;
		int ExpWhileleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExpWhileright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos ExpWhile = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst6(ExpWhile); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Inst ::= ExpIF 
            {
              TAtributos RESULT =null;
		int ExpIfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ExpIfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos ExpIf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst5(ExpIf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Inst ::= SWAP2 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Inst4(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Inst ::= SWAP1 PABIERTO PCERRADO 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Inst3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Inst ::= InsW 
            {
              TAtributos RESULT =null;
		int inswleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inswright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insw = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst2(insw); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Inst ::= InsR 
            {
              TAtributos RESULT =null;
		int insrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insr = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst1(insr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Inst ::= InsAsig 
            {
              TAtributos RESULT =null;
		int insasigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insasigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos insasig = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Inst0(insasig); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inst",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Insts ::= Inst PYC 
            {
              TAtributos RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Insts1(inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Insts ::= Insts PYC Inst PYC 
            {
              TAtributos RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos inst = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Insts0(insts,inst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Insts",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Valores ::= FALSE 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Valores2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Valores ::= TRUE 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Valores3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Valores ::= COMILLA PABIERTO digito PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Valores5(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Valores ::= COMILLA PABIERTO letra PCERRADO COMILLA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Valores4(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Valores ::= numeroEnt 
            {
              TAtributos RESULT =null;
		int numEntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numEntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numEnt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores1(numEnt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Valores ::= numeroReal 
            {
              TAtributos RESULT =null;
		int numrealleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numrealright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float numreal = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores0(numreal); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Valores ::= numeroNat 
            {
              TAtributos RESULT =null;
		int numnatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numnatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numnat = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Valores(numnat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Valores",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoBasico ::= CARACTER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico4(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoBasico ::= FLOAT 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico3(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoBasico ::= NATURAL 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TipoBasico ::= INTEGER 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TipoBasico ::= BOOLEAN 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.TipoBasico0(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposTupla ::= Tipo 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.TiposTupla1(tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TiposTupla ::= TiposTupla COMA Tipo 
            {
              TAtributos RESULT =null;
		int tipostuplaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tipostuplaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipostupla = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = atrb.TiposTupla0(tipostupla,tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TiposTupla",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Componente ::= ident 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Componente1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Componente ::= numero 
            {
              TAtributos RESULT =null;
		int numEntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numEntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer numEnt = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Componente0(numEnt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Componente",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= PABIERTO TiposTupla PCERRADO 
            {
              TAtributos RESULT =null;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo3(tipos); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= Tipo CABIERTO Componente CCERRADO PYC 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos comp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Tipo2(tipo,comp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= ident PYC 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Tipo ::= TipoBasico PYC 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Tipo0(tipobasico); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Designador ::= ident GUIONBAJO numero 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.designador3(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Designador ::= ident CABIERTO Exp CCERRADO 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos exp = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.designador2(id,exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Designador ::= ident 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.designador1(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Designador",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecSub ::= VAR Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecSub0(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecSub",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecsSubs ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.DecsSubs2(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecsSubs ::= DecSub 
            {
              TAtributos RESULT =null;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubs1(decsub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecsSubs ::= DecsSubs PYC DecSub 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decsubleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsubright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos decsub = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.DecsSubs0(decssubs,decsub); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DecsSubs",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CS ::= VARS LLABIERTA DecsSubs LLCERRADA INSTRUCTIONS LLABIERTA Insts LLCERRADA 
            {
              TAtributos RESULT =null;
		int decssubsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int decssubsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos decssubs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.CS(decssubs,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PF ::= Tipo MULT ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PF1(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PF ::= Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PF0(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PFs ::= PF 
            {
              TAtributos RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFs1(pf);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PFs ::= PFs COMA PF 
            {
              TAtributos RESULT =null;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos pf = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.PFs0(pfs,pf); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PFs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Dec ::= SUBPROGRAM DP ident PABIERTO PFs PCERRADO LLABIERTA CS LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pfsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pfsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		TAtributos pfs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos cs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = atrb.Dec3(id,pfs,cs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Dec ::= VAR Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec2(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Dec ::= TIPO Tipo ident 
            {
              TAtributos RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos tipo = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec1(tipo,id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Dec ::= CONST TipoBasico ident IGUAL Valores 
            {
              TAtributos RESULT =null;
		int tipobasicoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tipobasicoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		TAtributos tipobasico = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valoresleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valoresright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos valores = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Dec0(tipobasico,id,valores); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Decs ::= Dec 
            {
              TAtributos RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Decs1(dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Decs ::= Decs PYC Dec 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		TAtributos dec = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= atrb.Decs0(decs,dec); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Subprogramas ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Subprogramas1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Subprogramas ::= SUBPROGRAMS LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Subprogramas0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprogramas",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Vars ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Vars1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Vars ::= VARS LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Vars0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Tipos ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Tipos1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Tipos ::= TIPOS LLABIERTA Decs LLCERRADA PYC 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Tipos0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Consts ::= 
            {
              TAtributos RESULT =null;
		 RESULT= atrb.Consts1(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Consts ::= CONSTS LLABIERTA Decs LLCERRADA 
            {
              TAtributos RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos decs = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= atrb.Consts0(decs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Consts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TAtributos start_val = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= program DP ident LLABIERTA Consts Tipos Vars Subprogramas INSTRUCTIONS LLABIERTA Insts LLCERRADA LLCERRADA 
            {
              TAtributos RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int constsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int constsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		TAtributos consts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tiposleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tiposright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		TAtributos tipos = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		TAtributos vars = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int subprogramasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int subprogramasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		TAtributos subprogramas = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int instsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		TAtributos insts = (TAtributos)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= atrb.Programa( consts,tipos,vars,subprogramas,insts); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

